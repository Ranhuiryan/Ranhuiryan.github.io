{"title":"Python 语言基础，IPython 和 Jupyter Notebook","uid":"e9467e98877499c2145d4cfcc50df70b","slug":"Python-语言基础，IPython-和-Jupyter-Notebook","date":"2019-07-15T09:03:24.000Z","updated":"2021-08-19T08:50:37.176Z","comments":true,"path":"api/articles/Python-语言基础，IPython-和-Jupyter-Notebook.json","keywords":null,"cover":"https://files.realpython.com/media/Python-Metaclasses_Watermarked.67e351592b05.jpg","content":"<p>Python 语言基础，IPython 和 Jupyter Notebook 学习笔记。</p>\n<hr>\n<h2 id=\"The-Python-Interpreter\"><a href=\"#The-Python-Interpreter\" class=\"headerlink\" title=\"The Python Interpreter\"></a>The Python Interpreter</h2><pre class=\"line-numbers language-shell\" data-language=\"shell\"><code class=\"language-shell\">$ python\nPython 3.6.0 | packaged by conda-forge | (default, Jan 13 2017, 23:17:12)\n[GCC 4.8.2 20140120 (Red Hat 4.8.2-15)] on linux\nType &quot;help&quot;, &quot;copyright&quot;, &quot;credits&quot; or &quot;license&quot; for more information.\n&gt;&gt;&gt; a &#x3D; 5\n&gt;&gt;&gt; print(a)\n5</code></pre>\n\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">print(&#39;Hello world&#39;)</code></pre>\n\n<pre class=\"line-numbers language-shell\" data-language=\"shell\"><code class=\"language-shell\">$ python hello_world.py\nHello world</code></pre>\n\n<pre class=\"line-numbers language-shell\" data-language=\"shell\"><code class=\"language-shell\">$ ipython\nPython 3.6.0 | packaged by conda-forge | (default, Jan 13 2017, 23:17:12)\nType &quot;copyright&quot;, &quot;credits&quot; or &quot;license&quot; for more information.\n\nIPython 5.1.0 -- An enhanced Interactive Python.\n?         -&gt; Introduction and overview of IPython&#39;s features.\n%quickref -&gt; Quick reference.\nhelp      -&gt; Python&#39;s own help system.\nobject?   -&gt; Details about &#39;object&#39;, use &#39;object??&#39; for extra details.\n\nIn [1]: %run hello_world.py\nHello world\n\nIn [2]:</code></pre>\n\n<h2 id=\"IPython-Basics\"><a href=\"#IPython-Basics\" class=\"headerlink\" title=\"IPython Basics\"></a>IPython Basics</h2><h3 id=\"Running-the-IPython-Shell\"><a href=\"#Running-the-IPython-Shell\" class=\"headerlink\" title=\"Running the IPython Shell\"></a>Running the IPython Shell</h3><pre class=\"line-numbers language-shell\" data-language=\"shell\"><code class=\"language-shell\">$ ipython\nPython 3.6.0 | packaged by conda-forge | (default, Jan 13 2017, 23:17:12)\nType &quot;copyright&quot;, &quot;credits&quot; or &quot;license&quot; for more information.\n\nIPython 5.1.0 -- An enhanced Interactive Python.\n?         -&gt; Introduction and overview of IPython&#39;s features.\n%quickref -&gt; Quick reference.\nhelp      -&gt; Python&#39;s own help system.\nobject?   -&gt; Details about &#39;object&#39;, use &#39;object??&#39; for extra details.\n\nIn [1]: a &#x3D; 5\n\nIn [2]: a\nOut[2]: 5</code></pre>\n\n\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">import numpy as np\ndata &#x3D; &#123;i : np.random.randn() for i in range(7)&#125;\ndata</code></pre>\n\n\n\n\n<pre><code>&#123;0: -0.20470765948471295,\n 1: 0.47894333805754824,\n 2: -0.5194387150567381,\n 3: -0.55573030434749,\n 4: 1.9657805725027142,\n 5: 1.3934058329729904,\n 6: 0.09290787674371767&#125;\n</code></pre>\n<pre class=\"line-numbers language-shell\" data-language=\"shell\"><code class=\"language-shell\">&gt;&gt;&gt; from numpy.random import randn\n&gt;&gt;&gt; data &#x3D; &#123;i : randn() for i in range(7)&#125;\n&gt;&gt;&gt; print(data)\n&#123;0: -1.5948255432744511, 1: 0.10569006472787983, 2: 1.972367135977295,\n3: 0.15455217573074576, 4: -0.24058577449429575, 5: -1.2904897053651216,\n6: 0.3308507317325902&#125;</code></pre>\n\n<h3 id=\"Running-the-Jupyter-Notebook\"><a href=\"#Running-the-Jupyter-Notebook\" class=\"headerlink\" title=\"Running the Jupyter Notebook\"></a>Running the Jupyter Notebook</h3><pre class=\"line-numbers language-shell\" data-language=\"shell\"><code class=\"language-shell\">$ jupyter notebook\n[I 15:20:52.739 NotebookApp] Serving notebooks from local directory:\n&#x2F;home&#x2F;wesm&#x2F;code&#x2F;pydata-book\n[I 15:20:52.739 NotebookApp] 0 active kernels\n[I 15:20:52.739 NotebookApp] The Jupyter Notebook is running at:\nhttp:&#x2F;&#x2F;localhost:8888&#x2F;\n[I 15:20:52.740 NotebookApp] Use Control-C to stop this server and shut down\nall kernels (twice to skip confirmation).\nCreated new window in existing browser session.</code></pre>\n\n<h3 id=\"Tab-补全\"><a href=\"#Tab-补全\" class=\"headerlink\" title=\"Tab 补全\"></a>Tab 补全</h3><p>变量名补全</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">In [1]: an_apple &#x3D; 27\n\nIn [2]: an_example &#x3D; 42\n\nIn [3]: an</code></pre>\n\n<p>方法补全</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">In [3]: b &#x3D; [1, 2, 3]\n\nIn [4]: b.</code></pre>\n\n<p>模块补全</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">In [1]: import datetime\n\nIn [2]: datetime.</code></pre>\n\n<p>路径补全</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">In [7]: datasets&#x2F;movielens&#x2F;</code></pre>\n\n<h3 id=\"Introspection（内省）\"><a href=\"#Introspection（内省）\" class=\"headerlink\" title=\"Introspection（内省）\"></a>Introspection（内省）</h3><pre class=\"line-numbers language-none\"><code class=\"language-none\">In [8]: b &#x3D; [1, 2, 3]\n\nIn [9]: b?\nType:       list\nString Form:[1, 2, 3]\nLength:     3\nDocstring:\nlist() -&gt; new empty list\nlist(iterable) -&gt; new list initialized from iterable&#39;s items\n\nIn [10]: print?\nDocstring:\nprint(value, ..., sep&#x3D;&#39; &#39;, end&#x3D;&#39;\\n&#39;, file&#x3D;sys.stdout, flush&#x3D;False)\n\nPrints the values to a stream, or to sys.stdout by default.\nOptional keyword arguments:\nfile:  a file-like object (stream); defaults to the current sys.stdout.\nsep:   string inserted between values, default a space.\nend:   string appended after the last value, default a newline.\nflush: whether to forcibly flush the stream.\nType:      builtin_function_or_method</code></pre>\n\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">def add_numbers(a, b):\n    &quot;&quot;&quot;\n    Add two numbers together\n\n    Returns\n    -------\n    the_sum : type of arguments\n    &quot;&quot;&quot;\n    return a + b</code></pre>\n\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">In [11]: add_numbers?\nSignature: add_numbers(a, b)\nDocstring:\nAdd two numbers together\n\nReturns\n-------\nthe_sum : type of arguments\nFile:      &lt;ipython-input-9-6a548a216e27&gt;\nType:      function</code></pre>\n\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">In [12]: add_numbers??\nSignature: add_numbers(a, b)\nSource:\ndef add_numbers(a, b):\n    &quot;&quot;&quot;\n    Add two numbers together\n\n    Returns\n    -------\n    the_sum : type of arguments\n    &quot;&quot;&quot;\n    return a + b\nFile:      &lt;ipython-input-9-6a548a216e27&gt;\nType:      function</code></pre>\n\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">In [13]: np.*load*?\nnp.__loader__\nnp.load\nnp.loads\nnp.loadtxt\nnp.pkgload</code></pre>\n\n<h3 id=\"The-run-Command\"><a href=\"#The-run-Command\" class=\"headerlink\" title=\"The %run Command\"></a>The %run Command</h3><pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">def f(x, y, z):\n    return (x + y) &#x2F; z\n\na &#x3D; 5\nb &#x3D; 6\nc &#x3D; 7.5\n\nresult &#x3D; f(a, b, c)</code></pre>\n\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">In [14]: %run ipython_script_test.py</code></pre>\n\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">In [15]: c\nOut [15]: 7.5\n\nIn [16]: result\nOut[16]: 1.4666666666666666</code></pre>\n\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">&gt;&gt;&gt; %load ipython_script_test.py\n\n    def f(x, y, z):\n        return (x + y) &#x2F; z\n\n    a &#x3D; 5\n    b &#x3D; 6\n    c &#x3D; 7.5\n\n    result &#x3D; f(a, b, c)</code></pre>\n\n<h4 id=\"Interrupting-running-code\"><a href=\"#Interrupting-running-code\" class=\"headerlink\" title=\"Interrupting running code\"></a>Interrupting running code</h4><h3 id=\"Executing-Code-from-the-Clipboard（执行剪贴板中的程序）\"><a href=\"#Executing-Code-from-the-Clipboard（执行剪贴板中的程序）\" class=\"headerlink\" title=\"Executing Code from the Clipboard（执行剪贴板中的程序）\"></a>Executing Code from the Clipboard（执行剪贴板中的程序）</h3><pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">x &#x3D; 5\ny &#x3D; 7\nif x &gt; 5:\n    x +&#x3D; 1\n\n    y &#x3D; 8</code></pre>\n\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">In [17]: %paste\nx &#x3D; 5\ny &#x3D; 7\nif x &gt; 5:\n    x +&#x3D; 1\n\n    y &#x3D; 8\n## -- End pasted text --</code></pre>\n\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">In [18]: %cpaste\nPasting code; enter &#39;--&#39; alone on the line to stop or use Ctrl-D.\n:x &#x3D; 5\n:y &#x3D; 7\n:if x &gt; 5:\n:    x +&#x3D; 1\n:\n:    y &#x3D; 8\n:--</code></pre>\n\n<h3 id=\"Terminal-Keyboard-Shortcuts（终端快捷键IPython）\"><a href=\"#Terminal-Keyboard-Shortcuts（终端快捷键IPython）\" class=\"headerlink\" title=\"Terminal Keyboard Shortcuts（终端快捷键IPython）\"></a>Terminal Keyboard Shortcuts（终端快捷键IPython）</h3><h3 id=\"About-Magic-Commands（魔术命令）\"><a href=\"#About-Magic-Commands（魔术命令）\" class=\"headerlink\" title=\"About Magic Commands（魔术命令）\"></a>About Magic Commands（魔术命令）</h3><p>使用 <code>%timeit</code> 检查语句的执行时间。</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">In [20]: a &#x3D; np.random.randn(100, 100)\n\nIn [20]: %timeit np.dot(a, a)\n10000 loops, best of 3: 20.9 µs per loop</code></pre>\n\n<p>魔术命令查看命令行。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">In [21]: %debug?\nDocstring:\n::\n\n  %debug [--breakpoint FILE:LINE] [statement [statement ...]]\n\nActivate the interactive debugger.\n\nThis magic command support two ways of activating debugger.\nOne is to activate debugger before executing code.  This way, you\ncan set a break point, to step through the code from the point.\nYou can use this mode by giving statements to execute and optionally\na breakpoint.\n\nThe other one is to activate debugger in post-mortem mode.  You can\nactivate this mode simply running %debug without any argument.\nIf an exception has just occurred, this lets you inspect its stack\nframes interactively.  Note that this will always work only on the last\ntraceback that occurred, so you must call this quickly after an\nexception that you wish to inspect has fired, because if another one\noccurs, it clobbers the previous one.\n\nIf you want IPython to automatically do this on every exception, see\nthe %pdb magic for more details.\n\npositional arguments:\n  statement             Code to run in debugger. You can omit this in cell\n                        magic mode.\n\noptional arguments:\n  --breakpoint &lt;FILE:LINE&gt;, -b &lt;FILE:LINE&gt;\n                        Set break point at LINE in FILE.\n\n&#96;&#96;&#96;                        \n\n*自动魔术*：不加 &#96;%&#96; 的魔法函数。通过 &#96;%automagic&#96; 启用。\n\n可赋值的魔术函数：\n\n&#96;&#96;&#96;python\nIn [22]: %pwd\nOut[22]: &#39;&#x2F;home&#x2F;wesm&#x2F;code&#x2F;pydata-book\n\nIn [23]: foo &#x3D; %pwd\n\nIn [24]: foo\nOut[24]: &#39;&#x2F;home&#x2F;wesm&#x2F;code&#x2F;pydata-book&#39;</code></pre>\n\n<h3 id=\"Matplotlib-Integration（matplotlib-集成）\"><a href=\"#Matplotlib-Integration（matplotlib-集成）\" class=\"headerlink\" title=\"Matplotlib Integration（matplotlib 集成）\"></a>Matplotlib Integration（matplotlib 集成）</h3><pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">In [26]: %matplotlib\nUsing matplotlib backend: Qt4Agg</code></pre>\n\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">In [26]: %matplotlib inline</code></pre>\n\n<h2 id=\"Python-Language-Basics（Python-语言基础）\"><a href=\"#Python-Language-Basics（Python-语言基础）\" class=\"headerlink\" title=\"Python Language Basics（Python 语言基础）\"></a>Python Language Basics（Python 语言基础）</h2><h3 id=\"Language-Semantics（语言语义）\"><a href=\"#Language-Semantics（语言语义）\" class=\"headerlink\" title=\"Language Semantics（语言语义）\"></a>Language Semantics（语言语义）</h3><h4 id=\"Indentation-not-braces（缩进）\"><a href=\"#Indentation-not-braces（缩进）\" class=\"headerlink\" title=\"Indentation, not braces（缩进）\"></a>Indentation, not braces（缩进）</h4><p><strong>冒号</strong>表示缩进代码块的开始，使用<strong>四个空格</strong>作为默认缩进。</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">for x in array:\n    if x &lt; pivot:\n        less.append(x)\n    else:\n        greater.append(x)</code></pre>\n\n<p>使用<em>分号</em>分割一行中的多条语句。</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">a &#x3D; 5; b &#x3D; 6; c &#x3D; 7</code></pre>\n\n<h4 id=\"Everything-is-an-object（一切皆为对象）\"><a href=\"#Everything-is-an-object（一切皆为对象）\" class=\"headerlink\" title=\"Everything is an object（一切皆为对象）\"></a>Everything is an object（一切皆为对象）</h4><h4 id=\"Comments（注释）\"><a href=\"#Comments（注释）\" class=\"headerlink\" title=\"Comments（注释）\"></a>Comments（注释）</h4><pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">results &#x3D; []\nfor line in file_handle:\n    # keep the empty lines for now\n    # if len(line) &#x3D;&#x3D; 0:\n    #   continue\n    results.append(line.replace(&#39;foo&#39;, &#39;bar&#39;))</code></pre>\n\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">print(&quot;Reached this line&quot;)  # Simple status report</code></pre>\n\n<h4 id=\"Function-and-object-method-calls（函数和对象方法调用）\"><a href=\"#Function-and-object-method-calls（函数和对象方法调用）\" class=\"headerlink\" title=\"Function and object method calls（函数和对象方法调用）\"></a>Function and object method calls（函数和对象方法调用）</h4><p>将返回值赋给一个变量。</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">result &#x3D; f(x, y, z)\ng()</code></pre>\n\n<p><em>方法</em>：Python 对象内置函数。</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">obj.some_method(x, y, z)</code></pre>\n\n<p>函数传参。</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">result &#x3D; f(a, b, c, d&#x3D;5, e&#x3D;&#39;foo&#39;)</code></pre>\n\n<h4 id=\"Variables-and-argument-passing（变量和参数传递）\"><a href=\"#Variables-and-argument-passing（变量和参数传递）\" class=\"headerlink\" title=\"Variables and argument passing（变量和参数传递）\"></a>Variables and argument passing（变量和参数传递）</h4><pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">a &#x3D; [1, 2, 3]</code></pre>\n\n\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">b &#x3D; a</code></pre>\n\n<p><code>a</code> 和 <code>b</code> 是指向相同的对象。</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">a.append(4)\nb</code></pre>\n\n\n\n\n<pre><code>[1, 2, 3, 4]\n</code></pre>\n<p>将对象传递到函数中时，不会改变在原有命名空间中对象和变量间的绑定。因此，可以用函数更改对象的内部值而无需返回任何对象。</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">def append_element(some_list, element):\n    some_list.append(element)</code></pre>\n\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">In [27]: data &#x3D; [1, 2, 3]\n\nIn [28]: append_element(data, 4)\n\nIn [29]: data\nOut[29]: [1, 2, 3, 4]</code></pre>\n\n<h4 id=\"Dynamic-references-strong-types（动态引用，强类型）\"><a href=\"#Dynamic-references-strong-types（动态引用，强类型）\" class=\"headerlink\" title=\"Dynamic references, strong types（动态引用，强类型）\"></a>Dynamic references, strong types（动态引用，强类型）</h4><p>Python <em>对象</em>引用不涉及类型。变量对于对象只是特定命名空间中的名称，类型信息储存于对象自身当中。</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">a &#x3D; 5\ntype(a)</code></pre>\n\n\n\n\n<pre><code>int\n</code></pre>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">a &#x3D; &#39;foo&#39;\ntype(a)</code></pre>\n\n\n\n\n<pre><code>str\n</code></pre>\n<p>Python 是<em>强类型</em>语言，所有对象都拥有一个指定的类型。</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">&#39;5&#39; + 5</code></pre>\n\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">---------------------------------------------------------------------------\n\nTypeError                                 Traceback (most recent call last)\n\n&lt;ipython-input-17-4dd8efb5fac1&gt; in &lt;module&gt;\n----&gt; 1 &#39;5&#39; + 5\n    \n\nTypeError: can only concatenate str (not &quot;int&quot;) to str</code></pre>\n\n<p>仅有特定、明显情况下，类型可以隐式（自动）地转换。</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">a &#x3D; 4.5\nb &#x3D; 2\n# String formatting, to be visited later\nprint(&#39;a is &#123;0&#125;, b is &#123;1&#125;&#39;.format(type(a), type(b)))\na &#x2F; b</code></pre>\n\n<p><code>isinstance</code> 函数，检查对象是否为特定类型的实例。</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">a &#x3D; 5\nisinstance(a, int)</code></pre>\n\n<p>检查对象类型是否包含在元组的类型中。</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">a &#x3D; 5; b &#x3D; 4.5\nisinstance(a, (int, float))\nisinstance(b, (int, float))</code></pre>\n\n<h4 id=\"Attributes-and-methods（属性与方法）\"><a href=\"#Attributes-and-methods（属性与方法）\" class=\"headerlink\" title=\"Attributes and methods（属性与方法）\"></a>Attributes and methods（属性与方法）</h4><p>属性：对象内部存储的其他对象。</p>\n<p>方法：与对象内部对象有关的函数。</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">In [1]: a &#x3D; &#39;foo&#39;\n\nIn [2]: a.&lt;Press Tab&gt;\na.capitalize  a.format      a.isupper     a.rindex      a.strip\na.center      a.index       a.join        a.rjust       a.swapcase\na.count       a.isalnum     a.ljust       a.rpartition  a.title\na.decode      a.isalpha     a.lower       a.rsplit      a.translate\na.encode      a.isdigit     a.lstrip      a.rstrip      a.upper\na.endswith    a.islower     a.partition   a.split       a.zfill\na.expandtabs  a.isspace     a.replace     a.splitlines\na.find        a.istitle     a.rfind       a.startswith</code></pre>\n\n<p><code>getattr</code> 函数获取对象的属性和方法：</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">a &#x3D; &#39;foo&#39;</code></pre>\n\n\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">getattr(a, &#39;split&#39;)</code></pre>\n\n<h4 id=\"Duck-typing（鸭子类型）\"><a href=\"#Duck-typing（鸭子类型）\" class=\"headerlink\" title=\"Duck typing（鸭子类型）\"></a>Duck typing（鸭子类型）</h4><p>不去关心对象的具体类型，而关心其是否拥有某个特殊方法或行为。</p>\n<p>因此可以验证一个对象是否可以迭代。</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">def isiterable(obj):\n    try:\n        iter(obj)\n        return True\n    except TypeError: # not iterable\n        return False</code></pre>\n\n\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">isiterable(&#39;a string&#39;)</code></pre>\n\n\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">isiterable([1, 2, 3])</code></pre>\n\n\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">isiterable(5)</code></pre>\n\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">---------------------------------------------------------------------------\n\nNameError                                 Traceback (most recent call last)\n\n&lt;ipython-input-18-1fb743da1716&gt; in &lt;module&gt;\n----&gt; 1 isiterable(5)\n    \n\nNameError: name &#39;isiterable&#39; is not defined</code></pre>\n\n<p>需要编写接受多种类型输入的函数时，可以使用此功能，将不可迭代的对象转换为列表。</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">if not isinstance(x, list) and isiterable(x):\n    x &#x3D; list(x)</code></pre>\n\n<h4 id=\"Imports（导入）\"><a href=\"#Imports（导入）\" class=\"headerlink\" title=\"Imports（导入）\"></a>Imports（导入）</h4><p>模块就是 <em>.py</em> 后缀的 Python 文件，假设有以下模块：</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"># some_module.py\nPI &#x3D; 3.14159\n\ndef f(x):\n    return x + 2\n\ndef g(a, b):\n    return a + b</code></pre>\n\n<p>从同一文件路径下的文件链接到该模块中定义的变量和函数。</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">import some_module\nresult &#x3D; some_module.f(5)\npi &#x3D; some_module.PI</code></pre>\n\n<p>或者</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">from some_module import f, g, PI\nresult &#x3D; g(5, PI)</code></pre>\n\n<p>使用 <code>as</code> 关键字，对导入模块赋予不同变量名</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">import some_module as sm\nfrom some_module import PI as pi, g as gf\n\nr1 &#x3D; sm.f(pi)\nr2 &#x3D; gf(6, pi)</code></pre>\n\n<h4 id=\"Binary-operators-and-comparisons（二元运算符和比较运算）\"><a href=\"#Binary-operators-and-comparisons（二元运算符和比较运算）\" class=\"headerlink\" title=\"Binary operators and comparisons（二元运算符和比较运算）\"></a>Binary operators and comparisons（二元运算符和比较运算）</h4><p>二元数学运算。</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">5 - 7\n12 + 21.5\n5 &lt;&#x3D; 2</code></pre>\n\n<p>检查两个变量名是否指向同一个对象（<code>is</code> 关键字）。</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">a &#x3D; [1, 2, 3]\nb &#x3D; a\na is b</code></pre>\n\n<p><code>list</code> 函数总是创建一个新的列表，所以变量 <code>a</code> 和 <code>c</code> 指向不同的对象。</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">c &#x3D; list(a)\na is not c    # 检查两个对象不是相同对象</code></pre>\n\n\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">a &#x3D;&#x3D; c</code></pre>\n\n<p><code>is</code> 和 <code>is not</code> 常用于检查一个变量是否为 <code>None</code>。</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">a &#x3D; None\na is None</code></pre>\n\n<h4 id=\"Mutable-and-immutable-objects（可变对象和不可变对象）\"><a href=\"#Mutable-and-immutable-objects（可变对象和不可变对象）\" class=\"headerlink\" title=\"Mutable and immutable objects（可变对象和不可变对象）\"></a>Mutable and immutable objects（可变对象和不可变对象）</h4><p>大部分对象如列表、字典都是可变对象，可变对象中包含的对象和值是可以修改的。</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">a_list &#x3D; [&#39;foo&#39;, 2, [4, 5]]\na_list[2] &#x3D; (3, 4)\na_list</code></pre>\n\n<p>字符串、元组对象是不可变的。</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">a_tuple &#x3D; (3, 5, (4, 5))\na_tuple[1] &#x3D; &#39;four&#39;</code></pre>\n\n<h3 id=\"Scalar-Types（标量类型）\"><a href=\"#Scalar-Types（标量类型）\" class=\"headerlink\" title=\"Scalar Types（标量类型）\"></a>Scalar Types（标量类型）</h3><p>Python 的标准库中拥有一个小的内建类型集合，用来处理数值数据、字符串、布尔值以及日期和时间。这类的“单值”类型有时候被称为<em>标量类型</em>。</p>\n<h4 id=\"Numeric-types（数值类型）\"><a href=\"#Numeric-types（数值类型）\" class=\"headerlink\" title=\"Numeric types（数值类型）\"></a>Numeric types（数值类型）</h4><p>基础数字类型 <code>int</code>。</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">ival &#x3D; 17239871\nival ** 6</code></pre>\n\n<p>基础数字类型 <code>float</code>，每一个浮点数都是双精度64位数值。</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">fval &#x3D; 7.243\nfval2 &#x3D; 6.78e-5</code></pre>\n\n<p>整数除法将结果自动转为浮点数。</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">3 &#x2F; 2</code></pre>\n\n<p>整除操作：</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">3 &#x2F;&#x2F; 2</code></pre>\n\n<h4 id=\"Strings（字符串）\"><a href=\"#Strings（字符串）\" class=\"headerlink\" title=\"Strings（字符串）\"></a>Strings（字符串）</h4><p>使用单引号 <code>&#39;</code> 或双引号 <code>&quot;</code> 创建字符串。</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">a &#x3D; &#39;one way of writing a string&#39;\nb &#x3D; &quot;another way&quot;</code></pre>\n\n<p>含换行的字符串（三个单引号 <code>&#39;&#39;&#39;</code> 或双引号 <code>&quot;&quot;&quot;</code>）</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">c &#x3D; &quot;&quot;&quot;\nThis is a longer string that\nspans multiple lines\n&quot;&quot;&quot;</code></pre>\n\n<p>计算 <code>c</code> 的回车符。（注意包括 <code>&quot;&quot;&quot;</code> 后的换行以及 <code>lines</code> 后的换行）</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">c.count(&#39;\\n&#39;)</code></pre>\n\n<p>字符串无法修改。</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">a &#x3D; &#39;this is a string&#39;\na[10] &#x3D; &#39;f&#39;\nb &#x3D; a.replace(&#39;string&#39;, &#39;longer string&#39;)\nb</code></pre>\n\n\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">a</code></pre>\n\n<p>用 <code>str</code> 函数转成字符串。</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">a &#x3D; 5.6\ns &#x3D; str(a)\nprint(s)</code></pre>\n\n<p>字符串可看作列表和元组外的另一个序列。</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">s &#x3D; &#39;python&#39;\nlist(s)\ns[:3]    # 对 s 切片</code></pre>\n\n<p>转义符号 <code>\\</code>。</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">s &#x3D; &#39;12\\\\34&#39;\nprint(s)</code></pre>\n\n<p>在字符串前加一个前缀符号 <code>r</code> 表明这些字符是原生字符。（特殊符号不会被转义）</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">s &#x3D; r&#39;this\\has\\no\\special\\characters&#39;\ns</code></pre>\n\n<p>字符串的结合。</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">a &#x3D; &#39;this is the first half &#39;\nb &#x3D; &#39;and this is the second half&#39;\na + b</code></pre>\n\n<p>字符串格式化，在下例中：</p>\n<ul>\n<li><code>&#123;0:.2f&#125;</code> 表示将第一个参数格式化为2位小数的浮点数</li>\n<li><code>&#123;1:s&#125;</code> 表示将第二个参数格式化为字符串</li>\n<li><code>&#123;2:d&#125;</code> 表示将第三个参数格式化为整数</li>\n</ul>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">template &#x3D; &#39;&#123;0:.2f&#125; &#123;1:s&#125; are worth US$&#123;2:d&#125;&#39;</code></pre>\n\n<p>将含有参数的序列传给字符串的 <code>format</code> 方法。</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">template.format(4.5560, &#39;Argentine Pesos&#39;, 1)</code></pre>\n\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">---------------------------------------------------------------------------\n\nNameError                                 Traceback (most recent call last)\n\n&lt;ipython-input-19-ab8588df4260&gt; in &lt;module&gt;\n----&gt; 1 template.format(4.5560, &#39;Argentine Pesos&#39;, 1)\n    \n\nNameError: name &#39;template&#39; is not defined</code></pre>\n\n<h4 id=\"Bytes-and-Unicode（字节与-Unicode）\"><a href=\"#Bytes-and-Unicode（字节与-Unicode）\" class=\"headerlink\" title=\"Bytes and Unicode（字节与 Unicode）\"></a>Bytes and Unicode（字节与 Unicode）</h4><pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">val &#x3D; &quot;español&quot;\nval</code></pre>\n\n<p>使用 <code>encode</code> 方法将此 Unicode 字符串转换为 UTF-8 字节。</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">val_utf8 &#x3D; val.encode(&#39;utf-8&#39;)\nval_utf8</code></pre>\n\n\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">type(val_utf8)</code></pre>\n\n<p>使用 <code>decode</code> 方法解码。</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">val_utf8.decode(&#39;utf-8&#39;)</code></pre>\n\n<p>一些不同的编码：</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">val.encode(&#39;latin1&#39;)\nval.encode(&#39;utf-16&#39;)\nval.encode(&#39;utf-16le&#39;)</code></pre>\n\n<p>在字符串前加前缀 <code>b</code> 定义字符文本。</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">bytes_val &#x3D; b&#39;this is bytes&#39;\nbytes_val</code></pre>\n\n\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">decoded &#x3D; bytes_val.decode(&#39;utf8&#39;)\ndecoded  # this is str (Unicode) now</code></pre>\n\n<h4 id=\"Booleans（布尔值）\"><a href=\"#Booleans（布尔值）\" class=\"headerlink\" title=\"Booleans（布尔值）\"></a>Booleans（布尔值）</h4><pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">True and True\nFalse or True</code></pre>\n\n<h4 id=\"Type-casting（类型转换）\"><a href=\"#Type-casting（类型转换）\" class=\"headerlink\" title=\"Type casting（类型转换）\"></a>Type casting（类型转换）</h4><pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">s &#x3D; &#39;3.14159&#39;\nfval &#x3D; float(s)\ntype(fval)</code></pre>\n\n\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">int(fval)</code></pre>\n\n\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">bool(fval)</code></pre>\n\n\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">bool(0)</code></pre>\n\n<h4 id=\"None\"><a href=\"#None\" class=\"headerlink\" title=\"None\"></a>None</h4><pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">a &#x3D; None\na is None</code></pre>\n\n\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">b &#x3D; 5\nb is not None</code></pre>\n\n<p><code>None</code> 作为函数参数默认值。</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">def add_and_maybe_multiply(a, b, c&#x3D;None):\n    result &#x3D; a + b\n\n    if c is not None:\n        result &#x3D; result * c\n\n    return result</code></pre>\n\n<p><code>None</code> 是 <code>NoneType</code> 类型的唯一实例。</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">type(None)</code></pre>\n\n<h4 id=\"Dates-and-times（日期、时间）\"><a href=\"#Dates-and-times（日期、时间）\" class=\"headerlink\" title=\"Dates and times（日期、时间）\"></a>Dates and times（日期、时间）</h4><p>Python 内建的 <code>datetime</code> 模块与 <code>datetime</code> 类型：</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">from datetime import datetime, date, time\ndt &#x3D; datetime(2011, 10, 29, 20, 30, 21)\ndt.day</code></pre>\n\n\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">dt.minute</code></pre>\n\n<p>获取 <code>datetime</code> 实例的 <code>date</code> 和 <code>time</code> 对象。</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">dt.date()</code></pre>\n\n\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">dt.time()</code></pre>\n\n<p>将 <code>datetime</code> 转换为字符串。</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">dt.strftime(&#39;%m&#x2F;%d&#x2F;%Y %H:%M&#39;)</code></pre>\n\n<p>将字符串转换为 <code>datetime</code> 对象。</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">datetime.strptime(&#39;20091031&#39;, &#39;%Y%m%d&#39;)</code></pre>\n\n<p>替换。</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">dt.replace(minute&#x3D;0, second&#x3D;0)</code></pre>\n\n<p><code>datetime.datetime</code> 是不可变类型，以上方法均是产生新的变量。</p>\n<p>两个不同 <code>datetime</code> 间的运算会产生一个 <code>datetime.timedelta</code> 对象。</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">dt2 &#x3D; datetime(2011, 11, 15, 22, 30)\ndelta &#x3D; dt2 - dt\ndelta</code></pre>\n\n\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">type(delta)</code></pre>\n\n<p>将 <code>timedelta</code> 加到 <code>datetime</code> 上。</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">dt</code></pre>\n\n\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">dt + delta</code></pre>\n\n<h3 id=\"Control-Flow（控制流）\"><a href=\"#Control-Flow（控制流）\" class=\"headerlink\" title=\"Control Flow（控制流）\"></a>Control Flow（控制流）</h3><h4 id=\"if-elif-and-else\"><a href=\"#if-elif-and-else\" class=\"headerlink\" title=\"if, elif, and else\"></a>if, elif, and else</h4><pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">x &#x3D; 10\n\nif x &lt; 0:\n    print(&quot;It&#39;s negative&quot;)</code></pre>\n\n<p>一个 <code>if</code> 语句可以接多个 <code>elif</code> 代码块和一个 <code>else</code> 代码块，若所有的 <code>elif</code> 均为 <code>False</code> 则执行 <code>else</code> 代码块。如果某个条件为 <code>True</code>，则后面的 <code>elif</code> 和 <code>else</code> 代码块则不会执行。</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">if x &lt; 0:\n    print(&quot;It&#39;s negative&quot;)\nelif x &#x3D;&#x3D; 0:\n    print(&#39;Equal to zero&#39;)\nelif 0 &lt; x &lt; 5:\n    print(&#39;Positive but smaller than 5&#39;)\nelse:\n    print(&#39;Positive and larger than or equal to 5&#39;)</code></pre>\n\n<p>条件判断时，判断顺序是从左到右且 <code>and</code> 和 <code>or</code> 两侧的条件会有“短路”现象。如下例中，<code>c &gt; d</code> 不会被判断。</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">a &#x3D; 5; b &#x3D; 7\nc &#x3D; 8; d &#x3D; 4\nif a &lt; b or c &gt; d:\n    print(&#39;Made it&#39;)</code></pre>\n\n<p>链式比较。</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">4 &gt; 3 &gt; 2 &gt; 1</code></pre>\n\n<h4 id=\"for-loops（for-循环）\"><a href=\"#for-loops（for-循环）\" class=\"headerlink\" title=\"for loops（for 循环）\"></a>for loops（for 循环）</h4><p>标准形式：</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">for value in collection:\n    # do something with value</code></pre>\n\n<p>使用 <code>continue</code> 关键字跳过 <code>continue</code> 后面的代码并进入下一次循环。</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">sequence &#x3D; [1, 2, None, 4, None, 5]\ntotal &#x3D; 0\nfor value in sequence:\n    if value is None:\n        continue\n    total +&#x3D; value\ntotal</code></pre>\n\n<p>使用 <code>break</code> 关键字结束循环。</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">sequence &#x3D; [1, 2, 0, 4, 6, 5, 2, 1]\ntotal_until_5 &#x3D; 0\nfor value in sequence:\n    if value &#x3D;&#x3D; 5:\n        break\n    total_until_5 +&#x3D; value\ntotal_until_5</code></pre>\n\n<p><code>break</code> 关键字仅结束最内层的 <code>for</code> 循环。</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">for i in range(4):\n    for j in range(4):\n        if j &gt; i:\n            break\n        print((i, j))</code></pre>\n\n<pre><code>(0, 0)\n(1, 0)\n(1, 1)\n(2, 0)\n(2, 1)\n(2, 2)\n(3, 0)\n(3, 1)\n(3, 2)\n(3, 3)\n</code></pre>\n<p>如果迭代的对象是一个序列（元组或列表），它们可以在 <code>for</code> 循环中拆包成为变量。</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">for a, b, c in iterator:\n    # do something</code></pre>\n\n<h4 id=\"while-loops（while-循环）\"><a href=\"#while-loops（while-循环）\" class=\"headerlink\" title=\"while loops（while 循环）\"></a>while loops（while 循环）</h4><p><code>while</code> 循环在条件不成立时或以 break 结尾时停止。</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">x &#x3D; 256\ntotal &#x3D; 0\nwhile x &gt; 0:\n    if total &gt; 500:\n        break\n    total +&#x3D; x\n    x &#x3D; x &#x2F;&#x2F; 2</code></pre>\n\n<h4 id=\"pass\"><a href=\"#pass\" class=\"headerlink\" title=\"pass\"></a>pass</h4><p><code>pass</code> 就是表示“什么都不做”的语句，可以作为还没有实现代码的占位符。</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">if x &lt; 0:\n    print(&#39;negative!&#39;)\nelif x &#x3D;&#x3D; 0:\n    # TODO: put something smart here\n    pass\nelse:\n    print(&#39;positive!&#39;)</code></pre>\n\n<h4 id=\"range\"><a href=\"#range\" class=\"headerlink\" title=\"range\"></a>range</h4><p><code>range</code> 函数返回一个迭代器，该迭代器生成一个等差数列。</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">range(10)</code></pre>\n\n\n\n\n<pre><code>range(0, 10)\n</code></pre>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">list(range(10))</code></pre>\n\n\n\n\n<pre><code>[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]\n</code></pre>\n<p>传参给 <code>range</code> 函数起始、结尾和步进（可以是负的）， <code>range</code> 函数产生的整数包含起始但不含结尾。</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">list(range(0, 20, 2))</code></pre>\n\n\n\n\n<pre><code>[0, 2, 4, 6, 8, 10, 12, 14, 16, 18]\n</code></pre>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">list(range(5, 0, -1))</code></pre>\n\n\n\n\n<pre><code>[5, 4, 3, 2, 1]\n</code></pre>\n<p>根据序列的索引遍历序列。</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">seq &#x3D; [1, 2, 3, 4]\nfor i in range(len(seq)):\n    val &#x3D; seq[i]\nprint(val)</code></pre>\n\n<pre><code>4\n</code></pre>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">sum &#x3D; 0\nfor i in range(100000):\n    # % 是求模操作符\n    if i % 3 &#x3D;&#x3D; 0 or i % 5 &#x3D;&#x3D; 0:\n        sum +&#x3D; i</code></pre>\n\n<h4 id=\"Ternary-expressions（三元表达式）\"><a href=\"#Ternary-expressions（三元表达式）\" class=\"headerlink\" title=\"Ternary expressions（三元表达式）\"></a>Ternary expressions（三元表达式）</h4><p>将一个 <code>if-else</code> 语句结合成一行代码。</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">value &#x3D; true时执行 if 条件 else false时执行</code></pre>\n\n\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">x &#x3D; 5\n&#39;Non-negative&#39; if x &gt;&#x3D; 0 else &#39;Negative&#39;</code></pre>\n\n\n\n\n<pre><code>&#39;Non-negative&#39;\n</code></pre>\n<h2 id=\"注：在-Anaconda-环境下正确配置-VSCode\"><a href=\"#注：在-Anaconda-环境下正确配置-VSCode\" class=\"headerlink\" title=\"注：在 Anaconda 环境下正确配置 VSCode\"></a>注：在 Anaconda 环境下正确配置 VSCode</h2><p>正确下载安装 Anaconda 后，在 VSCode 中直接执行 Python 脚本第一次总会出现找不到模块的问题，发现是由于配置不当而导致的。查阅<a href=\"https://code.visualstudio.com/docs/python/python-tutorial\">官方文档</a>后，得出解决方法如下：</p>\n<ol>\n<li>安装 VSCode Python 插件。</li>\n<li>在 Anaconda command prompt 中输入：<pre class=\"line-numbers language-shell\" data-language=\"shell\"><code class=\"language-shell\">code &quot;work-folder&quot;</code></pre></li>\n<li>等待 VSCode 执行即可。</li>\n</ol>\n","text":"Python 语言基础，IPython 和 Jupyter Notebook 学习笔记。 The Python Interpreter$ python Python 3.6.0 | packaged by conda-forge | (default, Jan 13 2017, ...","link":"","photos":[],"count_time":{"symbolsCount":"17k","symbolsTime":"16 mins."},"categories":[{"name":"笔记","slug":"笔记","count":3,"path":"api/categories/笔记.json"},{"name":"Python","slug":"笔记/Python","count":2,"path":"api/categories/笔记/Python.json"}],"tags":[{"name":"python","slug":"python","count":4,"path":"api/tags/python.json"},{"name":"读书笔记","slug":"读书笔记","count":3,"path":"api/tags/读书笔记.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#The-Python-Interpreter\"><span class=\"toc-text\">The Python Interpreter</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#IPython-Basics\"><span class=\"toc-text\">IPython Basics</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#Running-the-IPython-Shell\"><span class=\"toc-text\">Running the IPython Shell</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#Running-the-Jupyter-Notebook\"><span class=\"toc-text\">Running the Jupyter Notebook</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#Tab-%E8%A1%A5%E5%85%A8\"><span class=\"toc-text\">Tab 补全</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#Introspection%EF%BC%88%E5%86%85%E7%9C%81%EF%BC%89\"><span class=\"toc-text\">Introspection（内省）</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#The-run-Command\"><span class=\"toc-text\">The %run Command</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#Interrupting-running-code\"><span class=\"toc-text\">Interrupting running code</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#Executing-Code-from-the-Clipboard%EF%BC%88%E6%89%A7%E8%A1%8C%E5%89%AA%E8%B4%B4%E6%9D%BF%E4%B8%AD%E7%9A%84%E7%A8%8B%E5%BA%8F%EF%BC%89\"><span class=\"toc-text\">Executing Code from the Clipboard（执行剪贴板中的程序）</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#Terminal-Keyboard-Shortcuts%EF%BC%88%E7%BB%88%E7%AB%AF%E5%BF%AB%E6%8D%B7%E9%94%AEIPython%EF%BC%89\"><span class=\"toc-text\">Terminal Keyboard Shortcuts（终端快捷键IPython）</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#About-Magic-Commands%EF%BC%88%E9%AD%94%E6%9C%AF%E5%91%BD%E4%BB%A4%EF%BC%89\"><span class=\"toc-text\">About Magic Commands（魔术命令）</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#Matplotlib-Integration%EF%BC%88matplotlib-%E9%9B%86%E6%88%90%EF%BC%89\"><span class=\"toc-text\">Matplotlib Integration（matplotlib 集成）</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#Python-Language-Basics%EF%BC%88Python-%E8%AF%AD%E8%A8%80%E5%9F%BA%E7%A1%80%EF%BC%89\"><span class=\"toc-text\">Python Language Basics（Python 语言基础）</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#Language-Semantics%EF%BC%88%E8%AF%AD%E8%A8%80%E8%AF%AD%E4%B9%89%EF%BC%89\"><span class=\"toc-text\">Language Semantics（语言语义）</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#Indentation-not-braces%EF%BC%88%E7%BC%A9%E8%BF%9B%EF%BC%89\"><span class=\"toc-text\">Indentation, not braces（缩进）</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#Everything-is-an-object%EF%BC%88%E4%B8%80%E5%88%87%E7%9A%86%E4%B8%BA%E5%AF%B9%E8%B1%A1%EF%BC%89\"><span class=\"toc-text\">Everything is an object（一切皆为对象）</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#Comments%EF%BC%88%E6%B3%A8%E9%87%8A%EF%BC%89\"><span class=\"toc-text\">Comments（注释）</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#Function-and-object-method-calls%EF%BC%88%E5%87%BD%E6%95%B0%E5%92%8C%E5%AF%B9%E8%B1%A1%E6%96%B9%E6%B3%95%E8%B0%83%E7%94%A8%EF%BC%89\"><span class=\"toc-text\">Function and object method calls（函数和对象方法调用）</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#Variables-and-argument-passing%EF%BC%88%E5%8F%98%E9%87%8F%E5%92%8C%E5%8F%82%E6%95%B0%E4%BC%A0%E9%80%92%EF%BC%89\"><span class=\"toc-text\">Variables and argument passing（变量和参数传递）</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#Dynamic-references-strong-types%EF%BC%88%E5%8A%A8%E6%80%81%E5%BC%95%E7%94%A8%EF%BC%8C%E5%BC%BA%E7%B1%BB%E5%9E%8B%EF%BC%89\"><span class=\"toc-text\">Dynamic references, strong types（动态引用，强类型）</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#Attributes-and-methods%EF%BC%88%E5%B1%9E%E6%80%A7%E4%B8%8E%E6%96%B9%E6%B3%95%EF%BC%89\"><span class=\"toc-text\">Attributes and methods（属性与方法）</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#Duck-typing%EF%BC%88%E9%B8%AD%E5%AD%90%E7%B1%BB%E5%9E%8B%EF%BC%89\"><span class=\"toc-text\">Duck typing（鸭子类型）</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#Imports%EF%BC%88%E5%AF%BC%E5%85%A5%EF%BC%89\"><span class=\"toc-text\">Imports（导入）</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#Binary-operators-and-comparisons%EF%BC%88%E4%BA%8C%E5%85%83%E8%BF%90%E7%AE%97%E7%AC%A6%E5%92%8C%E6%AF%94%E8%BE%83%E8%BF%90%E7%AE%97%EF%BC%89\"><span class=\"toc-text\">Binary operators and comparisons（二元运算符和比较运算）</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#Mutable-and-immutable-objects%EF%BC%88%E5%8F%AF%E5%8F%98%E5%AF%B9%E8%B1%A1%E5%92%8C%E4%B8%8D%E5%8F%AF%E5%8F%98%E5%AF%B9%E8%B1%A1%EF%BC%89\"><span class=\"toc-text\">Mutable and immutable objects（可变对象和不可变对象）</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#Scalar-Types%EF%BC%88%E6%A0%87%E9%87%8F%E7%B1%BB%E5%9E%8B%EF%BC%89\"><span class=\"toc-text\">Scalar Types（标量类型）</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#Numeric-types%EF%BC%88%E6%95%B0%E5%80%BC%E7%B1%BB%E5%9E%8B%EF%BC%89\"><span class=\"toc-text\">Numeric types（数值类型）</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#Strings%EF%BC%88%E5%AD%97%E7%AC%A6%E4%B8%B2%EF%BC%89\"><span class=\"toc-text\">Strings（字符串）</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#Bytes-and-Unicode%EF%BC%88%E5%AD%97%E8%8A%82%E4%B8%8E-Unicode%EF%BC%89\"><span class=\"toc-text\">Bytes and Unicode（字节与 Unicode）</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#Booleans%EF%BC%88%E5%B8%83%E5%B0%94%E5%80%BC%EF%BC%89\"><span class=\"toc-text\">Booleans（布尔值）</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#Type-casting%EF%BC%88%E7%B1%BB%E5%9E%8B%E8%BD%AC%E6%8D%A2%EF%BC%89\"><span class=\"toc-text\">Type casting（类型转换）</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#None\"><span class=\"toc-text\">None</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#Dates-and-times%EF%BC%88%E6%97%A5%E6%9C%9F%E3%80%81%E6%97%B6%E9%97%B4%EF%BC%89\"><span class=\"toc-text\">Dates and times（日期、时间）</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#Control-Flow%EF%BC%88%E6%8E%A7%E5%88%B6%E6%B5%81%EF%BC%89\"><span class=\"toc-text\">Control Flow（控制流）</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#if-elif-and-else\"><span class=\"toc-text\">if, elif, and else</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#for-loops%EF%BC%88for-%E5%BE%AA%E7%8E%AF%EF%BC%89\"><span class=\"toc-text\">for loops（for 循环）</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#while-loops%EF%BC%88while-%E5%BE%AA%E7%8E%AF%EF%BC%89\"><span class=\"toc-text\">while loops（while 循环）</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#pass\"><span class=\"toc-text\">pass</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#range\"><span class=\"toc-text\">range</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#Ternary-expressions%EF%BC%88%E4%B8%89%E5%85%83%E8%A1%A8%E8%BE%BE%E5%BC%8F%EF%BC%89\"><span class=\"toc-text\">Ternary expressions（三元表达式）</span></a></li></ol></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E6%B3%A8%EF%BC%9A%E5%9C%A8-Anaconda-%E7%8E%AF%E5%A2%83%E4%B8%8B%E6%AD%A3%E7%A1%AE%E9%85%8D%E7%BD%AE-VSCode\"><span class=\"toc-text\">注：在 Anaconda 环境下正确配置 VSCode</span></a></li></ol>","author":{"name":"Ryanhui","slug":"blog-author","avatar":"https://avatars1.githubusercontent.com/u/43368274?s=460&u=50a78f666213a52518d0076c1ca1cd9862076167&v=4","link":"/","description":"写博客，不过是孤芳自赏","socials":{"github":"https://github.com/Ranhuiryan","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/wbgjh","zhihu":"","csdn":"","juejin":"","customs":{"bilibili":{"icon":"/svg/bilibili-fill.svg","link":"https://space.bilibili.com/5472735"},"researchgate":{"icon":"/svg/researchgate.svg","link":"https://www.researchgate.net/profile/Guo-Jihong"}}}},"mapped":true,"prev_post":{"title":"Python 内建数据结构，函数和文件系统","uid":"6b8807c9c6e36a32de17577c2c2f0dfa","slug":"Python-内建数据结构，函数和文件系统","date":"2019-07-15T09:12:05.000Z","updated":"2021-08-19T08:50:33.995Z","comments":true,"path":"api/articles/Python-内建数据结构，函数和文件系统.json","keywords":null,"cover":"https://files.realpython.com/media/Python-for-Embedded-Devices-Overview_Watermarked.77501e696f85.jpg","text":"Python 内建数据结构，函数和文件系统学习笔记。 Data Structures and Sequences（数据结构和序列）Tuple（元组）用逗号分隔创建元组。 tup &#x3D; 4, 5, 6 tup (4, 5, 6) 创建嵌套元组。 nested_tup &#x...","link":"","photos":[],"count_time":{"symbolsCount":"26k","symbolsTime":"24 mins."},"categories":[{"name":"笔记","slug":"笔记","count":3,"path":"api/categories/笔记.json"},{"name":"Python","slug":"笔记/Python","count":2,"path":"api/categories/笔记/Python.json"}],"tags":[{"name":"python","slug":"python","count":4,"path":"api/tags/python.json"},{"name":"读书笔记","slug":"读书笔记","count":3,"path":"api/tags/读书笔记.json"}],"author":{"name":"Ryanhui","slug":"blog-author","avatar":"https://avatars1.githubusercontent.com/u/43368274?s=460&u=50a78f666213a52518d0076c1ca1cd9862076167&v=4","link":"/","description":"写博客，不过是孤芳自赏","socials":{"github":"https://github.com/Ranhuiryan","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/wbgjh","zhihu":"","csdn":"","juejin":"","customs":{"bilibili":{"icon":"/svg/bilibili-fill.svg","link":"https://space.bilibili.com/5472735"},"researchgate":{"icon":"/svg/researchgate.svg","link":"https://www.researchgate.net/profile/Guo-Jihong"}}}}},"next_post":{"title":"Python 数据分析与可视化动手学：泡沫铝应力应变关系实验数据处理（线性回归）","uid":"0e4234a4caab3caa3ea203d33af78e67","slug":"数据分析与可视化动手学：泡沫铝应力应变关系（线性回归）","date":"2019-06-10T07:55:57.000Z","updated":"2021-08-19T08:49:08.611Z","comments":true,"path":"api/articles/数据分析与可视化动手学：泡沫铝应力应变关系（线性回归）.json","keywords":null,"cover":"https://image-assets.mihuashi.com/2021/08/16/13/Fgd60-Re0cmktuJZTAmYcUPlStDC.gif","text":"观察数据、导入数据、划分特征和标签、划分训练集和测试集、构建模型，模型可视化 Bilibili视频教程：同济子豪兄 第1步：导入数据分析库pandas，数据可视化库matplotlib%matplotlib inline是Ipython的魔法函数，其作用是使matplotlib绘...","link":"","photos":[],"count_time":{"symbolsCount":"3k","symbolsTime":"3 mins."},"categories":[{"name":"动手学","slug":"动手学","count":11,"path":"api/categories/动手学.json"},{"name":"Python","slug":"动手学/Python","count":2,"path":"api/categories/动手学/Python.json"}],"tags":[{"name":"动手学","slug":"动手学","count":11,"path":"api/tags/动手学.json"},{"name":"python","slug":"python","count":4,"path":"api/tags/python.json"},{"name":"Pandas","slug":"Pandas","count":2,"path":"api/tags/Pandas.json"},{"name":"数据分析","slug":"数据分析","count":2,"path":"api/tags/数据分析.json"}],"author":{"name":"Ryanhui","slug":"blog-author","avatar":"https://avatars1.githubusercontent.com/u/43368274?s=460&u=50a78f666213a52518d0076c1ca1cd9862076167&v=4","link":"/","description":"写博客，不过是孤芳自赏","socials":{"github":"https://github.com/Ranhuiryan","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/wbgjh","zhihu":"","csdn":"","juejin":"","customs":{"bilibili":{"icon":"/svg/bilibili-fill.svg","link":"https://space.bilibili.com/5472735"},"researchgate":{"icon":"/svg/researchgate.svg","link":"https://www.researchgate.net/profile/Guo-Jihong"}}}}}}