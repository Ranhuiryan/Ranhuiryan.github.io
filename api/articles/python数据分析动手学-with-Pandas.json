{"title":"python 数据分析动手学 with Pandas","uid":"30ff94be16f3004704f0b1e90b7e7d30","slug":"python数据分析动手学-with-Pandas","date":"2019-05-07T13:52:18.000Z","updated":"2021-08-19T08:43:54.374Z","comments":true,"path":"api/articles/python数据分析动手学-with-Pandas.json","keywords":null,"cover":"https://image-assets.mihuashi.com/2021/08/15/12/FmXQn-rd6oFPVRRaEEHhSBh-fKNx.png","content":"<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>头发苦短，我用python</p></blockquote>\n<p>使用 Python 的 Pandas 类库实现了对国家统计局地区统计数据的自动整理，快速对接到动态排名数据可视化模板。</p>\n<hr>\n<h2 id=\"必要开发环境\"><a href=\"#必要开发环境\" class=\"headerlink\" title=\"必要开发环境\"></a>必要开发环境</h2><ul>\n<li>Python 3.7.3</li>\n<li>Pandas</li>\n<li>Numpy</li>\n</ul>\n<h2 id=\"准备工作\"><a href=\"#准备工作\" class=\"headerlink\" title=\"准备工作\"></a>准备工作</h2><h3 id=\"安装软件\"><a href=\"#安装软件\" class=\"headerlink\" title=\"安装软件\"></a>安装软件</h3><p>安装 Pandas 第三类库，在终端输入指令</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">pip install pandas</code></pre>\n\n<p>由于 Pandas 基于 Numpy，因此执行上述指令时将自动安装 Numpy。</p>\n<h3 id=\"获取数据\"><a href=\"#获取数据\" class=\"headerlink\" title=\"获取数据\"></a>获取数据</h3><p>大数据的获取一般分两种手段：网络直接下载和爬虫。前者较为简单，但能够获取的数据量有限，且有时需要资金投入。后者学习门槛较高，但可获取的数据面广泛。本次以国家统计局统计的近20年各地区年生产总值为例，实现数据快速分析整理。</p>\n<p>进入<a href=\"http://data.stats.gov.cn/\">国家数据</a>，点击地区数据下的分省年度数据。</p>\n<p><img src=\"2019-05-07.png\" alt=\"数据库查询入口\"></p>\n<p>选择指标“地区生产总值”。</p>\n<p><img src=\"2019-05-07-223547.png\" alt=\"选择指标“地区生产总值”\"></p>\n<p>点击下载，选择 csv 格式。</p>\n<p><img src=\"python%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90%E5%8A%A8%E6%89%8B%E5%AD%A6-with-Pandas/2019-05-07-223837.png\"></p>\n<p>打开下载好的 csv 文件，格式如下。</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">数据库：分省年度数据\n指标：地区生产总值(亿元)\n时间：最近20年\n地区,2018年,2017年,2016年,2015年,2014年,2013年,2012年,2011年,2010年,2009年,2008年,2007年,2006年,2005年,2004年,2003年,2002年,2001年,2000年,1999年\n北京市,,28014.94,25669.13,23014.59,21330.83,19800.81,17879.40,16251.93,14113.58,12153.03,11115.00,9846.81,8117.78,6969.52,6033.21,5007.21,4315.00,3707.96,3161.66,2678.82\n天津市,,18549.19,17885.39,16538.19,15726.93,14442.01,12893.88,11307.28,9224.46,7521.85,6719.01,5252.76,4462.74,3905.64,3110.97,2578.03,2150.76,1919.09,1701.88,1500.95\n河北省,,34016.32,32070.45,29806.11,29421.15,28442.95,26575.01,24515.76,20394.26,17235.48,16011.97,13607.32,11467.60,10012.11,8477.63,6921.29,6018.28,5516.76,5043.96,4514.19\n...\n青海省,,2624.83,2572.49,2417.05,2303.32,2122.06,1893.54,1670.44,1350.43,1081.27,1018.62,797.35,648.50,543.32,466.10,390.20,340.65,300.13,263.68,239.38\n宁夏回族自治区,,3443.56,3168.59,2911.77,2752.10,2577.57,2341.29,2102.21,1689.65,1353.31,1203.92,919.11,725.90,612.61,537.11,445.36,377.16,337.44,295.02,264.58\n新疆维吾尔自治区,,10881.96,9649.70,9324.80,9273.46,8443.84,7505.31,6610.05,5437.47,4277.05,4183.21,3523.16,3045.26,2604.19,2209.09,1886.35,1612.65,1491.60,1363.56,1163.17\n&quot;注：本表按当年价格计算。2004年以前地区生产总值数据执行《国民经济行业分类》（GB&#x2F;T4754-1994），2004-2012年地区生产总值数据执行《国民经济行业分类》（GB&#x2F;T4754-2002）,三次产业划分根据《三次产业划分规定》（2003）。2013年开始，行业分类执行《国民经济行业分类》（GB&#x2F;T4754-2011），三次产业划分根据《三次产业划分规定》（2012）。&quot;\n数据来源：国家统计局</code></pre>\n\n<p>可见原始格式很难满足我们的要求，因此下一步将使用 python 将该数据表整理为我们需要的格式。</p>\n<h2 id=\"数据整理\"><a href=\"#数据整理\" class=\"headerlink\" title=\"数据整理\"></a>数据整理</h2><h3 id=\"导入-csv-文件\"><a href=\"#导入-csv-文件\" class=\"headerlink\" title=\"导入 csv 文件\"></a>导入 csv 文件</h3><p>使用 Pandas 中的 <code>read_csv()</code> 函数读入 csv 文件，如：</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\" data-start=\"1\" data-line=\"\" data-line-offset=\"0\"><code class=\"language-python\">import pandas as pd\nimport numpy as np\n\ns_data &#x3D; pd.read_csv(&#39;test.csv&#39;, skiprows &#x3D; 3, encoding &#x3D; &#39;utf-8&#39;)</code></pre>\n\n<p><strong>参数说明：</strong></p>\n<ul>\n<li><code>filepath_or_buffer</code> - 读取文件路径，可以是URL，可用URL类型包括：http, ftp, s3。</li>\n<li><code>skiprows</code> - 需要忽略的行数（从文件开始处算起），或需要跳过的行号列表（从0开始）。此处需删除前三行表头，设置 <code>skiprows = 3</code>。</li>\n<li><code>skipfooter</code> - 从文件尾部开始忽略。 (c引擎不支持)</li>\n<li><code>encoding</code> - 指定字符集类型，通常指定为’utf-8’。<a href=\"https://docs.python.org/3/library/codecs.html#standard-encodings\">List of Python standard encodings</a></li>\n</ul>\n<p>其余<a href=\"https://blog.csdn.net/orangefly0214/article/details/80756330#\">参数详解</a></p>\n<h3 id=\"整理原始数据\"><a href=\"#整理原始数据\" class=\"headerlink\" title=\"整理原始数据\"></a>整理原始数据</h3><p>使用 <code>dropna()</code> 函数删除空行与空列，函数形式为：</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\" data-start=\"1\" data-line=\"\" data-line-offset=\"0\"><code class=\"language-python\">DataFrame.dropna(axis&#x3D;0, how&#x3D;&#39;any&#39;, thresh&#x3D;None, subset&#x3D;None, inplace&#x3D;False)</code></pre>\n\n<p><strong>参数说明：</strong></p>\n<ul>\n<li>axis<ul>\n<li>axis=0: 删除包含缺失值的行</li>\n<li>axis=1: 删除包含缺失值的列</li>\n</ul>\n</li>\n<li>how: 与axis配合使用<ul>\n<li>how=’any’ :只要有缺失值出现，就删除该行货列</li>\n<li>how=’all’: 所有的值都缺失，才删除行或列</li>\n</ul>\n</li>\n<li>thresh： axis中至少有thresh个非缺失值，否则删除。比如 axis=0，thresh=10：标识如果该行中非缺失值的数量小于10，将删除改行。</li>\n<li>subset: list，在哪些列中查看是否有缺失值</li>\n<li>inplace: 是否在原数据上操作。如果为真，返回None否则返回新的copy，去掉了缺失值</li>\n</ul>\n<p>此处需要删除没有统计数据的2018年，以及表格底部的说明。</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\" data-start=\"1\" data-line=\"\" data-line-offset=\"0\"><code class=\"language-python\">s_data &#x3D; s_data.dropna(axis&#x3D;1, how&#x3D;&#39;all&#39;) #删除空列（未统计年份）\ns_data &#x3D; s_data.dropna(axis&#x3D;0, how&#x3D;&#39;any&#39;) #删除空行（底部说明）</code></pre>\n\n<p>转置表格，方便下一步处理。</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\" data-start=\"1\" data-line=\"\" data-line-offset=\"0\"><code class=\"language-python\">s_data &#x3D; s_data.T</code></pre>\n\n<h3 id=\"将数据写入目标格式\"><a href=\"#将数据写入目标格式\" class=\"headerlink\" title=\"将数据写入目标格式\"></a>将数据写入目标格式</h3><p>动态排名数据可视化模板要求的数据格式为：</p>\n<table>\n<thead>\n<tr>\n<th>name</th>\n<th>type</th>\n<th>value</th>\n<th>date</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>名称1</td>\n<td>类型1</td>\n<td>值1</td>\n<td>日期1</td>\n</tr>\n<tr>\n<td>名称2</td>\n<td>类型2</td>\n<td>值2</td>\n<td>日期2</td>\n</tr>\n</tbody></table>\n<p>其中“名称”会出现在柱状图的左侧作为Y轴，而“类型-名称”会作为附加信息出现在柱状图上。类型与柱状图的颜色相关，建议命名为不包含空格或者特殊符号的中英文字符。值与柱状图的长度绑定，必须是整数或浮点数。日期建议使用的格式为”YYYY-MM-DD”。</p>\n<p>新建一个空 DataFrame 数据表以储存输出的数据，其列索引为 <code>[&#39;name&#39;,&#39;type&#39;,&#39;value&#39;,&#39;date&#39;]</code>。</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\" data-start=\"1\" data-line=\"\" data-line-offset=\"0\"><code class=\"language-python\">o_data &#x3D; pd.DataFrame(columns &#x3D; [&#39;name&#39;,&#39;type&#39;,&#39;value&#39;,&#39;date&#39;])</code></pre>\n\n<p>同时新建一个名为 <code>temp</code> 的空数据表，其行数与 <code>o_data</code> 相同，而列数为统计省份的数量。</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\" data-start=\"1\" data-line=\"\" data-line-offset=\"0\"><code class=\"language-python\">temp &#x3D; pd.DataFrame(columns &#x3D; [&#39;name&#39;,&#39;type&#39;,&#39;value&#39;,&#39;date&#39;], index &#x3D; np.arange(0,s_data.shape[1]))</code></pre>\n\n<p>其中，<code>s_data.shape[1]</code> 为原始数据表的列数</p>\n<p>遍历一年中个省份的地方生产总值，并分别写到 <code>temp</code> 个对应位置中，将各年数据合并至 <code>o_data</code> 中即可。</p>\n<p>实现代码：</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\" data-start=\"1\" data-line=\"\" data-line-offset=\"0\"><code class=\"language-python\">for i in range(1,len(s_data)):\n    for j in range(0,s_data.shape[1]):\n        temp.iloc[j][&#39;name&#39;] &#x3D; s_data.loc[&#39;地区&#39;][j]    #将地区名写入 name 列\n        temp.iloc[j][&#39;type&#39;] &#x3D; s_data.index[0]      #将“地区”写入 type 列（可省略）\n        temp.iloc[j][&#39;value&#39;] &#x3D; s_data.iloc[i][j]       #将对应生产总值写入 value 列\n        temp.iloc[j][&#39;date&#39;] &#x3D; s_data.index[i]      #将对应年份写入 date 列\n    o_data &#x3D; pd.concat([o_data,temp],ignore_index&#x3D;True)     #将各年数据整合到输出表格中</code></pre>\n\n<p><code>len(s_data)</code> 为原始数据表的行数。索引 DataFrame 中特定元素值由两种方法：</p>\n<ol>\n<li><code>df.iloc</code> - 根据元素位置；</li>\n<li><code>df.loc</code> - 根据行索引。</li>\n</ol>\n<p>使用 <code>pd.concat()</code> 将两个数据表格按先后顺序合并，将 <code>ignore_index</code> 打开。</p>\n<h3 id=\"整理输出数据\"><a href=\"#整理输出数据\" class=\"headerlink\" title=\"整理输出数据\"></a>整理输出数据</h3><p>输出的数据表格中年份是按照降序排列的，直接导入可视化模板的话将按时间倒序展示，故使用 <code>sort_values()</code> 函数对表格数据重新排列，其形式如下：</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\" data-start=\"1\" data-line=\"\" data-line-offset=\"0\"><code class=\"language-python\">DataFrame.sort_values(by, axis&#x3D;0, ascending&#x3D;True, inplace&#x3D;False, kind&#x3D;&#39;quicksort&#39;, na_position&#x3D;&#39;last&#39;)</code></pre>\n\n<p><strong>参数说明：</strong></p>\n<p><img src=\"20181121192650776.png\" alt=\"sort_values()函数的具体参数\"></p>\n<p>使用 <code>sort_values()</code> 函数时要注意，默认的 inplace 设置是 False ，并没有对本体进行覆盖，可能会导致排序不成功的问题。此时需要设置 <code>inplace=True</code>，或者手动赋值给输出变量。</p>\n<p>对 <code>o_data</code> 中的 date 列进行升序排序：</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\" data-start=\"1\" data-line=\"\" data-line-offset=\"0\"><code class=\"language-python\">o_data &#x3D; o_data.sort_values(by&#x3D; [&#39;date&#39;], ascending&#x3D; True) #对年份重新排序</code></pre>\n\n<h3 id=\"导出-csv-文件\"><a href=\"#导出-csv-文件\" class=\"headerlink\" title=\"导出 csv 文件\"></a>导出 csv 文件</h3><p>关闭行索引，以 utf-8 格式导出到 csv 文件。</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\" data-start=\"1\" data-line=\"\" data-line-offset=\"0\"><code class=\"language-python\">o_data.to_csv(&#39;output.csv&#39;, encoding &#x3D; &#39;utf-8&#39;, index&#x3D; False )</code></pre>\n\n<p>注意 <code>to_csv()</code> 是 DataFrame 类的方法，<code>read_csv()</code> 是 pandas 的方法。</p>\n","text":" 头发苦短，我用python 使用 Python 的 Pandas 类库实现了对国家统计局地区统计数据的自动整理，快速对接到动态排名数据可视化模板。 必要开发环境 Python 3.7.3 Pandas Numpy 准备工作安装软件安装 Pandas 第三类库，在终端输入指令 p...","link":"","photos":[],"count_time":{"symbolsCount":"4.9k","symbolsTime":"4 mins."},"categories":[{"name":"动手学","slug":"动手学","count":12,"path":"api/categories/动手学.json"},{"name":"Python","slug":"动手学/Python","count":2,"path":"api/categories/动手学/Python.json"}],"tags":[{"name":"动手学","slug":"动手学","count":11,"path":"api/tags/动手学.json"},{"name":"python","slug":"python","count":4,"path":"api/tags/python.json"},{"name":"Pandas","slug":"Pandas","count":2,"path":"api/tags/Pandas.json"},{"name":"数据分析","slug":"数据分析","count":2,"path":"api/tags/数据分析.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%BF%85%E8%A6%81%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83\"><span class=\"toc-text\">必要开发环境</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%87%86%E5%A4%87%E5%B7%A5%E4%BD%9C\"><span class=\"toc-text\">准备工作</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%AE%89%E8%A3%85%E8%BD%AF%E4%BB%B6\"><span class=\"toc-text\">安装软件</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E8%8E%B7%E5%8F%96%E6%95%B0%E6%8D%AE\"><span class=\"toc-text\">获取数据</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E6%95%B0%E6%8D%AE%E6%95%B4%E7%90%86\"><span class=\"toc-text\">数据整理</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%AF%BC%E5%85%A5-csv-%E6%96%87%E4%BB%B6\"><span class=\"toc-text\">导入 csv 文件</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%95%B4%E7%90%86%E5%8E%9F%E5%A7%8B%E6%95%B0%E6%8D%AE\"><span class=\"toc-text\">整理原始数据</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%B0%86%E6%95%B0%E6%8D%AE%E5%86%99%E5%85%A5%E7%9B%AE%E6%A0%87%E6%A0%BC%E5%BC%8F\"><span class=\"toc-text\">将数据写入目标格式</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%95%B4%E7%90%86%E8%BE%93%E5%87%BA%E6%95%B0%E6%8D%AE\"><span class=\"toc-text\">整理输出数据</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%AF%BC%E5%87%BA-csv-%E6%96%87%E4%BB%B6\"><span class=\"toc-text\">导出 csv 文件</span></a></li></ol></li></ol>","author":{"name":"Ryanhui","slug":"blog-author","avatar":"https://avatars1.githubusercontent.com/u/43368274?s=460&u=50a78f666213a52518d0076c1ca1cd9862076167&v=4","link":"/","description":"写博客，不过是孤芳自赏","socials":{"github":"https://github.com/Ranhuiryan","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/wbgjh","zhihu":"","csdn":"","juejin":"","customs":{"bilibili":{"icon":"/svg/bilibili-fill.svg","link":"https://space.bilibili.com/5472735"},"researchgate":{"icon":"/svg/researchgate.svg","link":"https://www.researchgate.net/profile/Guo-Jihong"}}}},"mapped":true,"prev_post":{"title":"HTML 动手学（1）","uid":"5422a3fb710d74bb991f64a2009371d0","slug":"HTML-动手学（1）","date":"2019-05-25T08:51:39.000Z","updated":"2021-08-19T08:49:34.409Z","comments":true,"path":"api/articles/HTML-动手学（1）.json","keywords":null,"cover":"https://paradacreativa.es/wp-content/uploads/2019/12/C%C3%B3mo-abrir-archivos-HTML-foto.jpg","text":"Codecademy HTML 教程学习笔记 何谓 HTMLHTML (HyperText Markup Language): Markup 语言为定义纯文本结构以及版式的编程语言。 计算机可以解读 HTML 元素中的纯文本。 HyperText（超文本）为可链接到其他文本的文字...","link":"","photos":[],"count_time":{"symbolsCount":"1.6k","symbolsTime":"1 mins."},"categories":[{"name":"动手学","slug":"动手学","count":12,"path":"api/categories/动手学.json"},{"name":"HTML","slug":"动手学/HTML","count":7,"path":"api/categories/动手学/HTML.json"}],"tags":[{"name":"动手学","slug":"动手学","count":11,"path":"api/tags/动手学.json"},{"name":"HTML","slug":"HTML","count":7,"path":"api/tags/HTML.json"},{"name":"前端开发","slug":"前端开发","count":7,"path":"api/tags/前端开发.json"}],"author":{"name":"Ryanhui","slug":"blog-author","avatar":"https://avatars1.githubusercontent.com/u/43368274?s=460&u=50a78f666213a52518d0076c1ca1cd9862076167&v=4","link":"/","description":"写博客，不过是孤芳自赏","socials":{"github":"https://github.com/Ranhuiryan","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/wbgjh","zhihu":"","csdn":"","juejin":"","customs":{"bilibili":{"icon":"/svg/bilibili-fill.svg","link":"https://space.bilibili.com/5472735"},"researchgate":{"icon":"/svg/researchgate.svg","link":"https://www.researchgate.net/profile/Guo-Jihong"}}}}},"next_post":{}}