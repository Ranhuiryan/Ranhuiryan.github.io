{"title":"All-in-boom mini 搭建实录","uid":"4538564b517722c06fd0394a0f566431","slug":"All-in-boom-mini-搭建实录","date":"2022-03-13T08:59:54.000Z","updated":"2022-03-23T13:42:06.164Z","comments":true,"path":"api/articles/All-in-boom-mini-搭建实录.json","keywords":null,"cover":[],"content":"<p>最近搞了一台 All-in-One 的迷你小主机，因此久违地写一篇博文记录一下整个过程。其实早在半年前便有想攒一台小钢炮，用于替代我之前被改造为 NAS 服务器的老笔记本。但是 2021 年的 DIY 市场的行情大家都有目共睹，因此这个计划便一直被搁置。时间到了 2022 年初，DIY 配件的价格逐渐下降到合理的水平，加之亟需一个更强大的 GPU 计算平台，再加之过年期间搞了个小项目赚了点外快……总之各种因素之下促成了这次的装机。计划初期想要达成的目标主要为以下几点：</p>\n<ul>\n<li>体积足够小，能够摆放在架子和书桌上，方便移动；</li>\n<li>支持 Windows 和 Linux 虚拟机多开；</li>\n<li>CPU 性能足够实时流畅转码 4K 60Hz 10bit HDR HEVC 格式的电影；</li>\n<li>显卡显存足够大，能够用于调试和运行小规模的深度学习 CV 项目代码；</li>\n<li>显卡性能能够应付当前绝大部分主流游戏在中高特效下 1080p 60Hz 流畅运行；</li>\n<li>整机价格控制在 3500 元以内，使用的配件保证足够稳定，不追求极致的性价比。</li>\n</ul>\n<p>综合上述几点考虑，最终选择了性价比魔改 U QTJ2 + Geforce GTX TITAN X 这样奇怪的组合，系统选择了熟悉的 Unraid，整个系统软件部分搭建的过程如下图所示。</p>\n<img src=\"All-in-boom-mini-搭建实录/unraid-all-in-one.drawio.svg\" style=\"zoom:75%;\" />\n\n<h1 id=\"硬件配置\"><a href=\"#硬件配置\" class=\"headerlink\" title=\"硬件配置\"></a>硬件配置</h1><p>CPU 方面选择了去年较火的 QJT2，属于当前主流的六核十二线程配置，单核睿频 4.3GHz，全核睿频 4.0GHz，还附赠一个 HD 630 核显。虽然加 200 元就能买到核心数和频率更高的锐龙 1700X，但是当时考虑到锐龙平台下配置虚拟机可能遇到的潜在 bug，以及较差的内存控制器可能会导致虚拟机较高的性能折损于是作罢（虽然现在看来这方面的担心完全没必要）。主板选择了 Mini-DTX 规格的华擎 B150M-HDS，这块主板由于尺寸（$19\\times19$）和标准 ITX 主板（$17\\times17$）相近，而且能够兼容大多数体积不是很小的 ITX 机箱，因而常常误被当作 ITX 主板，但价格仅仅是普通 B150 ITX 主板的 1/3。同时它还有一个 PCIe 3.0x1 的扩展插槽，可以插一张 SATA 扩展卡从而弥补仅有 4 个板载 SATA 接口的不足，或者插一张 2.5G 网卡从而提供高速网络接口。内存使用的是所长之前开车的两条 PNY DDR4 16G 内存，最高支持工作频率 2666。PNY 这个牌子中文名叫“必恩威”，之前主要是做商用显卡的，现在也做闪存了。然而这款内存的兼容性似乎不佳，在这套平台上实测只能跑到 2133，但总归是全新量大价格便宜而且耐用。GPU 采用 Maxwell 时代的旗舰卡皇 Geforce TITAN X。由于九代架构原因，此卡在去年矿潮期间价格不增反降。TITAN X 拥有完整 GM200 核心，12GB 显存，应付一些小的深度学习项目绰绰有余了。该卡还有一个 24GB 显存版本且价格更低的孪生兄弟 Tesla M40，但是该卡采用的被动散热，放在 ITX 机箱中需要改主动散热，加之九系卡恐怖的功耗，考虑再三还是放弃了。机箱采用了翼王的 Vector V1 青春版，这是我看过的 A4 机箱中支持硬盘位置最多的，塞满能放下 7 块 3.5 寸机械硬盘和 2 块 2.5 寸固态硬盘，唯一的槽点就是公差控制做的不好，侧板的螺丝孔位常常对不上。具体的配置表和价格如下：</p>\n<ul>\n<li>CPU：QTJ2 500元</li>\n<li>散热：利民AXP90 79元</li>\n<li>主板：华擎 B150M-HDS 100元</li>\n<li>内存：PNY DDR4 2666（实际工作在 2133）16G $\\times$ 2 538元</li>\n<li>显卡：Geforce TITAN X 1800元</li>\n<li>电源：长城 650W SFX 全模组 250元</li>\n<li>机箱：Vector V1 青春版 200元</li>\n<li>合计：3467元</li>\n</ul>\n<p>硬盘方面用的都是从旧 NAS 中拆出来的老家底所以就没有算到整机配置中，系统盘为用的已经掉壳闪迪 32GB U盘，主力仓库盘为去年双十二拼多多白菜价时买的两块 4TB 西数紫盘。固态硬盘为一块 480G 的铁甲悍将和 128G 的威刚 SU600，分别用作虚拟机的系统盘和缓存盘。此外还有一块希捷 6TB 酷鱼作为虚拟机的仓储盘，暂时用 USB 线连接并放到机箱外面，众所周知 ITX 机箱外的体积是不算体积的。最终的装机效果还算满意，体积也控制到了可以放进实验室书架里面的程度，放一张组装完毕的整机图。</p>\n<p><img src=\"All-in-boom-mini-%E6%90%AD%E5%BB%BA%E5%AE%9E%E5%BD%95/%E5%BE%AE%E4%BF%A1%E5%9B%BE%E7%89%87_20220316224339.jpg\"></p>\n<p>另外值得一提的是，翼王这款机箱的前面板只有一个 USB 3.0 接口，主板自带的前面板 USB 2.0 插针就被闲置了。为此我从淘宝上搞了个 USB 2.0 插针转双 USB 扩展口，这样就可以将 Unraid 启动 U 盘和无线键鼠的接收器藏到机箱里面，既能够保持机箱外部整洁美观，也可以避免搬动主机或插拔线时不小心碰到系统 U 盘，导致接触不良致使系统崩溃。</p>\n<p><img src=\"All-in-boom-mini-%E6%90%AD%E5%BB%BA%E5%AE%9E%E5%BD%95/%E5%BE%AE%E4%BF%A1%E5%9B%BE%E7%89%87_20220316224327.jpg\"></p>\n<h2 id=\"刷入魔改-BIOS\"><a href=\"#刷入魔改-BIOS\" class=\"headerlink\" title=\"刷入魔改 BIOS\"></a>刷入魔改 BIOS</h2><p><strong>注：以下内容仅适合华擎 B150 系主板，其他主板可参考进行设置</strong></p>\n<p>100 系主板上魔改 CPU 需要对 BIOS 进行修改，原厂 BIOS 可以通过工具 <a href=\"https://disk.yandex.ru/d/i4FE9b-o3apk5b\">CoffeeTime</a> 修改，具体修改过程可以参照 B 站大佬司波图的<a href=\"https://www.bilibili.com/video/BV1Jh411h7Jk\">视频</a>，也可以向魔改 CPU 的卖家索取修改好的 BIOS。我是直接用卖家提供的 BIOS。华擎这款主板的 BIOS 芯片是直插式的，直接将芯片从主板上扣下，放入 CH341A 编程器中刷入就行（注意将芯片的缺口与编程器的示意图方向向一致后再插入电脑，否则有烧坏芯片的风险）。</p>\n<h2 id=\"解锁-CPU-功耗\"><a href=\"#解锁-CPU-功耗\" class=\"headerlink\" title=\"解锁 CPU 功耗\"></a>解锁 CPU 功耗</h2><p>卖家给的 BIOS 默认将解锁 CPU 功耗的选项隐藏了。为了将这颗 CPU 的性能完全释放，需要先手动开启这些选项。华擎的 BIOS 普遍都是基于 AMI BIOS 修改而来，因此也可以通过 AMI 的 AMIBCP 工具进行定制。首先对原来的 BIOS 进行备份，在 AMIBCP 中选择 File -&gt; Open，打开要修改的 BIOS 文件。</p>\n<p>![](All-in-boom-mini-搭建实录/Screenshot 2022-03-16 221459.png)</p>\n<p>展开 Setup Configuration 选项卡，找到 Advanced -&gt; OC Tweaker -&gt; CPU Configuration，将 Long Duration Power Limit、Short Duration Power Limit 和 Long Duration Maintained 的 Access/Use 从 Default 修改为 USER，保存并退出。</p>\n<p>![](All-in-boom-mini-搭建实录/Screenshot 2022-03-16 222208.png)</p>\n<p>此时将修改好的 BIOS 文件重新刷入芯片，开机按 Del 进入 BIOS，按 F6 进入高级设置。进入 OC Tweaker -&gt; CPU Configuration，就可以看到上述的三个选项在 BIOS 中出现了。将 Long Duration Power Limit 和 Short Duration Power Limit 均设置为 100，将 Long Duration Maintained 设置为最大，CPU 功耗解锁就完成了。</p>\n<!--\n虽然华擎这款 B150M 仅有可怜的 4 相供电，但应付 QTJ2 也是游刃有余了。实测在解锁 CPU 功耗后，单烤 FPU CPU 功耗为 (...)W，全核心满载 4.0GHz，温度 (...)℃。双烤 CPU 温度 (...)℃，GPU 温度 84℃，功耗 (...)W。可以看出当前配置下，CPU 在单烤和双烤中不会受到功耗和温度瓶颈，可以保持长期满负载稳定运行，满载性能与 i5-10400 相当。GPU 受到公版散热能力影响，被限制在 84℃ 温度墙附近，长期无法达到 Boost 满频率运行，可以通过适当拉高风扇转速，调整温度墙，使得 GPU 性能完全释放。\n-->\n\n<h2 id=\"其他-BIOS-设置\"><a href=\"#其他-BIOS-设置\" class=\"headerlink\" title=\"其他 BIOS 设置\"></a>其他 BIOS 设置</h2><p>为方便以后使用，这里也可以一并将其他 BIOS 选项一并预先设置好。进入 Advanced -&gt; CPU Configuration，将 Intel Virtualization Technology 设置为 Enabled，将 C-state 设置为 Disabled。</p>\n<p>进入 Chipset Configuration，将 VT-d 选项设置为 Enabled（开启虚拟机直通 PCIe 设备的重要功能），将 Primary Graphics Adapter 设置为 iGPU，IGPU Multi-Monitor 设置为 Enabled（因为独显之后要直通给虚拟机，因此这里设置采用核显作为主要输出设备，使得 Unraid 可以调用核显输出画面）。</p>\n<p>进入 Boot，将 Fast Boot 设置为 Disabled，进入 CSM(Compatibility Support Module)，将 CSM 设置为 Enabled。进入 Exit，选择 Save changes and exit，点击 OK 确定保存好所有更改，之后机器会自动重启。</p>\n<h1 id=\"系统配置\"><a href=\"#系统配置\" class=\"headerlink\" title=\"系统配置\"></a>系统配置</h1><p>本次装机系统使用的是的 Unraid，版本为截至撰文时最新正式版本 6.9.2。安装系统需要先准备一个 U 盘，U 盘推荐大小 4GB 以上，以及一台可以正常联网使用的 Windows PC 或 MAC。</p>\n<h2 id=\"安装系统\"><a href=\"#安装系统\" class=\"headerlink\" title=\"安装系统\"></a>安装系统</h2><p>Unraid 系统安装步骤十分简单：制作启动 U 盘，从启动 U 盘进入系统。制作启动盘推荐两种方法，一种是采用官方工具自动制作，另一种是手动制作。</p>\n<h3 id=\"自动制作启动盘\"><a href=\"#自动制作启动盘\" class=\"headerlink\" title=\"自动制作启动盘\"></a>自动制作启动盘</h3><p>首先在另外一台电脑上插入 U 盘，下载好 <a href=\"https://unraid.net/download\">USB Flash Creator</a> 并打开。请先确认在 Select your USB Flash device 下 U 盘信息是否被工具识别到，之后在 Select version 下选择 Stable 和 Unraid 6.9.2，点击 Customize，<strong>取消</strong>勾选 Allow UEFI Boot，其他选项均为默认。</p>\n<p>![](All-in-boom-mini-搭建实录/Screenshot 2022-03-18 200626.png)</p>\n<p>所有信息确认无误后点击 Write，会弹出警告提示 U 盘上面的数据会全部清除，点击 Erase and Write，耐心等待进度条结束之后系统 U 盘就自动刷写好啦~，可以取下 U 盘进入系统了。</p>\n<p>![](All-in-boom-mini-搭建实录/Screenshot 2022-03-18 201926.png)</p>\n<h3 id=\"手动制作启动盘\"><a href=\"#手动制作启动盘\" class=\"headerlink\" title=\"手动制作启动盘\"></a>手动制作启动盘</h3><p>首先在另外一台电脑上插入 U 盘，下载好 <a href=\"https://rufus.ie/\">Rufus</a>（或者其他系统盘制作工具）并打开。在设备栏下选择 U 盘，引导类型选择非可引导，分区类型选择 MBR，卷标修改为大写 UNRAID，其余选项均为默认。</p>\n<p>![](All-in-boom-mini-搭建实录/Screenshot 2022-03-18 203328.png)</p>\n<p>按上述设置好后点击“开始”，会弹出警告提示 U 盘上面的数据会全部清除，点击 OK，等待进度条走完 U 盘的准备工作便完成了。</p>\n<p>从 Unraid 官网下载最新的系统<a href=\"https://unraid.net/zh/%E4%B8%8B%E8%BD%BD\">发行版</a>镜像，将压缩包中的所有文件均解压到 U 盘的根目录下。在解压的文件中找到 make_bootable.bat（MAC 和 Linux 系统下可以使用对应的 make_bootable 文件，此处不再多说明），右键点击选择“以管理员身份运行”，会出现弹窗。首先在弹窗的第二行确认 U 盘的盘符和卷标无误，之后按任意键继续。</p>\n<p>![](All-in-boom-mini-搭建实录/Screenshot 2022-03-18 205625.png)</p>\n<p>等待 Completed 出现就表示系统 U 盘就刷写好啦~，按任意键退出弹窗，可以取下 U 盘进入系统了。</p>\n<p>![](All-in-boom-mini-搭建实录/Screenshot 2022-03-18 210025.png)</p>\n<p>注意：无论使用何种方式，千万<strong>不要将 U 盘设置为 UEFI 方式启动</strong>，避免之后的系统安装和虚拟机硬件直通出现问题。</p>\n<h3 id=\"进入系统\"><a href=\"#进入系统\" class=\"headerlink\" title=\"进入系统\"></a>进入系统</h3><p>刷写好系统 U 盘后，将 U 盘插入主板上的 USB 接口，开机按 F11 进入启动菜单，选择 U 盘启动进入系统（切勿选择 UEFI 启动模式），耐心等待直至屏幕上面显示出服务器的 IP 地址。此时将另外一台电脑接入局域网中，打开浏览器输入服务器的 IP 地址即可进入 Unraid 的登录界面。（另外，如果连接的是家庭局域网，可以在另一台电脑上直接打开地址 <code>http://tower.local</code> 进入）</p>\n<p><img src=\"https://wiki.unraid.net/images/1/11/Set_root_password.png\"></p>\n<p>初次登录系统需要为 root 账户设置密码，设置好后进入系统会首先来到 Registration 页面。我们可以先申请一个试用版本的 Key（试用 Key 的有效期为 30 天，过期之后还有 2 次申请延长试用的机会，每次可延长 15 天）。点击 GET TRIAL KEY，即可开启试用。（我已经激活了 Pro 许可）</p>\n<p>![](All-in-boom-mini-搭建实录/Screenshot 2022-03-16 232735.png)</p>\n<p>申请试用后，浏览器会自动跳转到 Main 选项卡下面，整个系统安装过程到此顺利完成了。</p>\n<p><img src=\"https://wiki.unraid.net/images/d/df/Configuringarray1.png\"></p>\n<h2 id=\"建立阵列\"><a href=\"#建立阵列\" class=\"headerlink\" title=\"建立阵列\"></a>建立阵列</h2><p>与大多数 NAS 系统相同，在使用 Unraid 系统前必须对系统中的磁盘建立阵列。Unraid 中的磁盘阵列可以分为 2 种：Array 和 Pool（6.9.0 以前称为 Cache），以下分别介绍这两种阵列的用途和配置方式。</p>\n<h3 id=\"Array\"><a href=\"#Array\" class=\"headerlink\" title=\"Array\"></a>Array</h3><p>Array 主要用于存放 NAS 中需要长期保留的数据（例如需要长期备份的文档、照片、下载的文件、资料、电影、电视剧、音乐、游戏安装包等等）。Array 中的硬盘又可以分为数据盘和校验盘，前者是存放数据的仓库盘，后者则为存放额外校验数据的硬盘。校验盘不是必须的，但为阵列添加校验盘会对数据起到有效的保护作用。如要添加校验盘需要特别注意以下几点：</p>\n<ul>\n<li>一块校验盘可以确保有一块数据盘失效后阵列中的数据不丢失，两块校验盘可以确保最多有两块数据盘失效后阵列中的数据不丢失；</li>\n<li>校验盘的容量需要大于或等于所有数据盘中容量最大的硬盘；</li>\n<li>为保证阵列中数据的读写速度，校验盘的读写速度应尽量快于所有数据盘中读写速度最快的硬盘；</li>\n<li>建立校验盘盘后应尽量避免向 Array 中直接写入 Docker 应用的文件以及虚拟机文件，会极大影响 Docker 应用和虚拟机的运行速度；</li>\n<li>建立校验盘的算法为奇偶校验（奇偶校验的具体介绍可以参考 B 站 <a href=\"https://space.bilibili.com/88461692\">3Blue1Brown</a> 的<a href=\"https://www.bilibili.com/video/BV1WK411N7kz\">视频</a>），因此同步校验的速度还与 CPU 的计算速度相关。</li>\n</ul>\n<p>建立 Array 的方式很简单：在 Unraid 管理页面上方点击 MAIN 选项卡来到 MAIN 页面，找到 Array Devices 下，其中前两个槽位 Parity 表示校验盘，之后的槽位 Disk 表示数据盘，在相应槽位旁边的下拉菜单中选择对应的硬盘便表示将其添加到 Array 中。</p>\n<p>![Screenshot 2022-03-22 215900](All-in-boom-mini-搭建实录/Screenshot 2022-03-22 215900.png)</p>\n<p>因为我对 NAS 的用途只是存存下载的电影资料啥的，因此只添加了两块 4T 西数紫盘作为数据盘。</p>\n<h3 id=\"Pool\"><a href=\"#Pool\" class=\"headerlink\" title=\"Pool\"></a>Pool</h3><p>在 Unraid 系统中如果同时向 Array 添加了固态硬盘和机械硬盘，固态硬盘往往会受到机械硬盘的影响无法发挥全部性能，尤其是添加了大容量机械硬盘作为校验盘时。同时，像 Docker 应用的文件以及虚拟机文件等对读写速度要求较高的数据，若直接存放在 Array 中也会极大影响 Docker 应用和虚拟机的性能。一种比较好的解决方式是在 Array 之外建立独立的阵列，即 Pool，并将固态硬盘添加到 Pool 中作为阵列数据的高速缓存盘，便可极大提高阵列数据的读写性能。</p>\n<p>需要注意的是 6.9.0 之后可以建立多个 Pool，且同一个 Pool 下可以添加多个硬盘，但多添加的硬盘不能直接为 Pool 扩充容量，而是自动组成 BTRFS RAID 1 模式。组成 BTRFS RAID 1 后的容量大小可以通过这个<a href=\"http://carfax.org.uk/btrfs-usage/\">网站</a>计算。</p>\n<p>在 Main 选项卡下点击 ADD POOL 新建一个 Pool，会弹出一个对话框，在 Name 处填写新建 Pool 的名称（例如 Cache，注意不要使用中文作为 Pool 的名称），在 Slots 下选择 Pool 中硬盘的个数，点击 ADD。</p>\n<p>![Screenshot 2022-03-22 220026](All-in-boom-mini-搭建实录/Screenshot 2022-03-22 220026.png)</p>\n<p>新建好的 Pool 会出现在 Pool Devices 下面，在对应槽位旁边的下拉菜单中选择相应的硬盘便表示将其添加到该 Pool 中。我此处建立了 3 个 Pool 阵列：Cache、Domain、Vmdata，分别用于存放 Docker 应用文件和缓存、Docker 和 libvirt 镜像以及虚拟机系统数据、除系统数据外虚拟机的其他文件。</p>\n<p>![](All-in-boom-mini-搭建实录/Screenshot 2022-03-22 225134.png)</p>\n<h3 id=\"启动阵列\"><a href=\"#启动阵列\" class=\"headerlink\" title=\"启动阵列\"></a>启动阵列</h3><p>为 Array 和 Pool 分配好硬盘后，下拉到页面底部点击 START 即可开启阵列。如果是第一次启动阵列，或者向阵列中添加了新的硬盘，需要先对硬盘格式化才可以使用。</p>\n<p>![Screenshot 2022-03-22 220112](All-in-boom-mini-搭建实录/Screenshot 2022-03-22 220112.png)</p>\n<h2 id=\"文件共享\"><a href=\"#文件共享\" class=\"headerlink\" title=\"文件共享\"></a>文件共享</h2><p>建立好磁盘阵列后就可以建立共享文件夹了。在 Unraid 管理页面上方点击 SHARES 选项卡，在 User Shares 下可以看到 Unraid 已经帮我们建好了 4 个共享文件夹，分别是：</p>\n<ul>\n<li>appdata —— 用于存放 Docker 应用数据；</li>\n<li>domains —— 用于存放虚拟机系统文件；</li>\n<li>isos —— 用于存放虚拟机安装镜像；</li>\n<li>system —— 用于存放 Docker 和 libvirt 镜像。</li>\n</ul>\n<p>我们需要添加三个额外的共享文件夹，分别用于存放备份数据、下载的媒体文件、虚拟机数据</p>\n<p>参考资料：</p>\n<ol>\n<li><p><a href=\"https://wiki.unraid.net/Articles/Getting_Started\">Articles/Getting Started - Unraid | Docs</a></p>\n</li>\n<li><p><a href=\"https://rufus.ie/zh/\">Rufus - 轻松创建USB启动盘</a></p>\n</li>\n<li><p><a href=\"https://wiki.unraid.net/Manual/Storage_Management\">Manual/Storage Management - Unraid | Docs</a></p>\n</li>\n</ol>\n","text":"最近搞了一台 All-in-One 的迷你小主机，因此久违地写一篇博文记录一下整个过程。其实早在半年前便有想攒一台小钢炮，用于替代我之前被改造为 NAS 服务器的老笔记本。但是 2021 年的 DIY 市场的行情大家都有目共睹，因此这个计划便一直被搁置。时间到了 2022 年初，...","link":"","photos":[],"count_time":{"symbolsCount":"7.5k","symbolsTime":"7 mins."},"categories":[{"name":"技术","slug":"技术","count":3,"path":"api/categories/技术.json"}],"tags":[{"name":"Home lab","slug":"Home-lab","count":1,"path":"api/tags/Home-lab.json"},{"name":"Linux","slug":"Linux","count":2,"path":"api/tags/Linux.json"},{"name":"Unraid","slug":"Unraid","count":1,"path":"api/tags/Unraid.json"},{"name":"网络技术","slug":"网络技术","count":3,"path":"api/tags/网络技术.json"},{"name":"硬件杂谈","slug":"硬件杂谈","count":1,"path":"api/tags/硬件杂谈.json"},{"name":"深度学习","slug":"深度学习","count":4,"path":"api/tags/深度学习.json"},{"name":"云游戏","slug":"云游戏","count":1,"path":"api/tags/云游戏.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E7%A1%AC%E4%BB%B6%E9%85%8D%E7%BD%AE\"><span class=\"toc-text\">硬件配置</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%88%B7%E5%85%A5%E9%AD%94%E6%94%B9-BIOS\"><span class=\"toc-text\">刷入魔改 BIOS</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E8%A7%A3%E9%94%81-CPU-%E5%8A%9F%E8%80%97\"><span class=\"toc-text\">解锁 CPU 功耗</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%85%B6%E4%BB%96-BIOS-%E8%AE%BE%E7%BD%AE\"><span class=\"toc-text\">其他 BIOS 设置</span></a></li></ol></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E7%B3%BB%E7%BB%9F%E9%85%8D%E7%BD%AE\"><span class=\"toc-text\">系统配置</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%AE%89%E8%A3%85%E7%B3%BB%E7%BB%9F\"><span class=\"toc-text\">安装系统</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E8%87%AA%E5%8A%A8%E5%88%B6%E4%BD%9C%E5%90%AF%E5%8A%A8%E7%9B%98\"><span class=\"toc-text\">自动制作启动盘</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%89%8B%E5%8A%A8%E5%88%B6%E4%BD%9C%E5%90%AF%E5%8A%A8%E7%9B%98\"><span class=\"toc-text\">手动制作启动盘</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E8%BF%9B%E5%85%A5%E7%B3%BB%E7%BB%9F\"><span class=\"toc-text\">进入系统</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%BB%BA%E7%AB%8B%E9%98%B5%E5%88%97\"><span class=\"toc-text\">建立阵列</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#Array\"><span class=\"toc-text\">Array</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#Pool\"><span class=\"toc-text\">Pool</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%90%AF%E5%8A%A8%E9%98%B5%E5%88%97\"><span class=\"toc-text\">启动阵列</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E6%96%87%E4%BB%B6%E5%85%B1%E4%BA%AB\"><span class=\"toc-text\">文件共享</span></a></li></ol></li></ol>","author":{"name":"Ryanhui","slug":"blog-author","avatar":"https://avatars1.githubusercontent.com/u/43368274?s=460&u=50a78f666213a52518d0076c1ca1cd9862076167&v=4","link":"/","description":"写博客，不过是孤芳自赏","socials":{"github":"https://github.com/Ranhuiryan","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/wbgjh","zhihu":"","csdn":"","juejin":"","customs":{"bilibili":{"icon":"/svg/bilibili-fill.svg","link":"https://space.bilibili.com/5472735"},"researchgate":{"icon":"/svg/researchgate.svg","link":"https://www.researchgate.net/profile/Guo-Jihong"}}}},"mapped":true,"prev_post":{"title":"FusionGAN A generative adversarial network for infrared and visible image fusion","uid":"3b05abbbb24af09a6038b8abf094c611","slug":"FusionGAN-A-generative-adversarial-network-for-infrared-and-visible-image-fusion","date":"2022-03-15T13:45:59.000Z","updated":"2022-05-14T07:29:55.437Z","comments":true,"path":"api/articles/FusionGAN-A-generative-adversarial-network-for-infrared-and-visible-image-fusion.json","keywords":null,"cover":null,"text":"原文地址 摘要红外图像能够通过热辐射将目标从背景中区分，在全天 24 小时和各种天气下均能取得较好的效果。另一方面，可见光图像能够提供高空间分辨率下的纹理细节，其表达方式易于被人类视觉系统理解。本文基于生成对抗网络提出了一个全新图像融合方法，称为“FusionGAN”。本文模型在...","link":"","photos":[],"count_time":{"symbolsCount":693,"symbolsTime":"1 mins."},"categories":[{"name":"笔记","slug":"笔记","count":6,"path":"api/categories/笔记.json"}],"tags":[{"name":"论文笔记","slug":"论文笔记","count":3,"path":"api/tags/论文笔记.json"}],"author":{"name":"Ryanhui","slug":"blog-author","avatar":"https://avatars1.githubusercontent.com/u/43368274?s=460&u=50a78f666213a52518d0076c1ca1cd9862076167&v=4","link":"/","description":"写博客，不过是孤芳自赏","socials":{"github":"https://github.com/Ranhuiryan","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/wbgjh","zhihu":"","csdn":"","juejin":"","customs":{"bilibili":{"icon":"/svg/bilibili-fill.svg","link":"https://space.bilibili.com/5472735"},"researchgate":{"icon":"/svg/researchgate.svg","link":"https://www.researchgate.net/profile/Guo-Jihong"}}}}},"next_post":{"title":"Pyramid Scene Parsing Network","uid":"ce5127719d6df7436613d79d93f8eaae","slug":"Pyramid-Scene-Parsing-Network","date":"2021-11-30T12:21:14.000Z","updated":"2021-11-30T15:11:26.967Z","comments":true,"path":"api/articles/Pyramid-Scene-Parsing-Network.json","keywords":null,"cover":"https://pdf.cdn.readpaper.com/parsed/fetch_target/e9aefc21afc420c8f6d4146a2741c1d0_3_Figure_3.png","text":"原文地址 摘要在无限制开放词汇和多样场景下对场景解释极具挑战。本文通过金字塔池化模块和提出的金字塔场景解释网络（PSPNet）实现了基于不同区域的背景聚合。虽然全局先前表征对在场景解释任务中产生高质量结果十分有效，但是 PSPNet 提供了一种更加优越的像素级别预测框架。本文提出...","link":"","photos":[],"count_time":{"symbolsCount":"1.1k","symbolsTime":"1 mins."},"categories":[{"name":"笔记","slug":"笔记","count":6,"path":"api/categories/笔记.json"}],"tags":[{"name":"深度学习","slug":"深度学习","count":4,"path":"api/tags/深度学习.json"},{"name":"论文笔记","slug":"论文笔记","count":3,"path":"api/tags/论文笔记.json"}],"author":{"name":"Ryanhui","slug":"blog-author","avatar":"https://avatars1.githubusercontent.com/u/43368274?s=460&u=50a78f666213a52518d0076c1ca1cd9862076167&v=4","link":"/","description":"写博客，不过是孤芳自赏","socials":{"github":"https://github.com/Ranhuiryan","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/wbgjh","zhihu":"","csdn":"","juejin":"","customs":{"bilibili":{"icon":"/svg/bilibili-fill.svg","link":"https://space.bilibili.com/5472735"},"researchgate":{"icon":"/svg/researchgate.svg","link":"https://www.researchgate.net/profile/Guo-Jihong"}}}}}}