{"title":"Python 内建数据结构，函数和文件系统","uid":"6b8807c9c6e36a32de17577c2c2f0dfa","slug":"Python-内建数据结构，函数和文件系统","date":"2019-07-15T09:12:05.000Z","updated":"2021-08-19T08:50:33.995Z","comments":true,"path":"api/articles/Python-内建数据结构，函数和文件系统.json","keywords":null,"cover":"https://files.realpython.com/media/Python-for-Embedded-Devices-Overview_Watermarked.77501e696f85.jpg","content":"<p>Python 内建数据结构，函数和文件系统学习笔记。</p>\n<hr>\n<h2 id=\"Data-Structures-and-Sequences（数据结构和序列）\"><a href=\"#Data-Structures-and-Sequences（数据结构和序列）\" class=\"headerlink\" title=\"Data Structures and Sequences（数据结构和序列）\"></a>Data Structures and Sequences（数据结构和序列）</h2><h3 id=\"Tuple（元组）\"><a href=\"#Tuple（元组）\" class=\"headerlink\" title=\"Tuple（元组）\"></a>Tuple（元组）</h3><p>用逗号分隔创建元组。</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">tup &#x3D; 4, 5, 6\ntup</code></pre>\n\n\n\n\n<pre><code>(4, 5, 6)\n</code></pre>\n<p>创建嵌套元组。</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">nested_tup &#x3D; (4, 5, 6), (7, 8)\nnested_tup</code></pre>\n\n\n\n\n<pre><code>((4, 5, 6), (7, 8))\n</code></pre>\n<p>使用 <code>tuple</code> 将任意序列或迭代器转换为元组。</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">tuple([4, 0, 2])\ntup &#x3D; tuple(&#39;string&#39;)\ntup</code></pre>\n\n\n\n\n<pre><code>(&#39;s&#39;, &#39;t&#39;, &#39;r&#39;, &#39;i&#39;, &#39;n&#39;, &#39;g&#39;)\n</code></pre>\n<p>获取元组中的元素。</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">tup[0]</code></pre>\n\n\n\n\n<pre><code>&#39;s&#39;\n</code></pre>\n<p>元组中储存的对象自身是可变的，但元组一旦被创建，各位置上的对象无法被修改。</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">tup &#x3D; tuple([&#39;foo&#39;, [1, 2], True])\ntup[2] &#x3D; False</code></pre>\n\n\n<pre><code>---------------------------------------------------------------------------\n\nTypeError                                 Traceback (most recent call last)\n\n&lt;ipython-input-13-11b694945ab9&gt; in &lt;module&gt;\n      1 tup = tuple([&#39;foo&#39;, [1, 2], True])\n----&gt; 2 tup[2] = False\n\n\nTypeError: &#39;tuple&#39; object does not support item assignment\n</code></pre>\n<p>如果元组中的对象是可变的，则可以在它内部进行修改。</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">tup[1].append(3)\ntup</code></pre>\n\n\n\n\n<pre><code>(&#39;foo&#39;, [1, 2, 3], True)\n</code></pre>\n<p><code>+</code> 链接元组。</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">(4, None, &#39;foo&#39;) + (6, 0) + (&#39;bar&#39;,)</code></pre>\n\n\n\n\n<pre><code>(4, None, &#39;foo&#39;, 6, 0, &#39;bar&#39;)\n</code></pre>\n<p><code>*</code> 生成多个元组的拷贝。</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">(&#39;foo&#39;, &#39;bar&#39;) * 4</code></pre>\n\n\n\n\n<pre><code>(&#39;foo&#39;, &#39;bar&#39;, &#39;foo&#39;, &#39;bar&#39;, &#39;foo&#39;, &#39;bar&#39;, &#39;foo&#39;, &#39;bar&#39;)\n</code></pre>\n<p>注意此时对象没有改变，只是指向他们的引用进行了复制。</p>\n<h4 id=\"Unpacking-tuples（元组拆包）\"><a href=\"#Unpacking-tuples（元组拆包）\" class=\"headerlink\" title=\"Unpacking tuples（元组拆包）\"></a>Unpacking tuples（元组拆包）</h4><pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">tup &#x3D; (4, 5, 6)\na, b, c &#x3D; tup\nb</code></pre>\n\n\n\n\n<pre><code>5\n</code></pre>\n<p>嵌套元组拆包。</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">tup &#x3D; 4, 5, (6, 7)\na, b, (c, d) &#x3D; tup\nd</code></pre>\n\n\n\n\n<pre><code>7\n</code></pre>\n<p>使用此方法交换对象的变量名。</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">a, b &#x3D; 1, 2\nprint(a, b)\n\nb, a &#x3D; a, b\nprint(a, b)</code></pre>\n\n<pre><code>1 2\n2 1\n</code></pre>\n<p>拆包遍历元组或列表。</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">seq &#x3D; [(1, 2, 3), (4, 5, 6), (7, 8, 9)]\nfor a, b, c in seq:\n    print(&#39;a&#x3D;&#123;0&#125;, b&#x3D;&#123;1&#125;, c&#x3D;&#123;2&#125;&#39;.format(a, b, c))</code></pre>\n\n<pre><code>a=1, b=2, c=3\na=4, b=5, c=6\na=7, b=8, c=9\n</code></pre>\n<p>使用 <code>*[变量名]</code> 获取从元组的某一位置开始任意长度的参数列表。</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">values &#x3D; 1, 2, 3, 4, 5\na, b, *rest &#x3D; values\na, b\nrest</code></pre>\n\n\n\n\n<pre><code>[3, 4, 5]\n</code></pre>\n<p>此方法可以用于剔除不想要的数据，为表示方便，使用 <code>_</code> 做变量名代表不想要的变量。</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">a, b, *_ &#x3D; values</code></pre>\n\n<h4 id=\"Tuple-methods（元组方法）\"><a href=\"#Tuple-methods（元组方法）\" class=\"headerlink\" title=\"Tuple methods（元组方法）\"></a>Tuple methods（元组方法）</h4><p><code>count</code> 方法统计元组中某个对象出现的次数。</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">a &#x3D; (1, 2, 2, 2, 3, 4, 2)\na.count(2)</code></pre>\n\n\n\n\n<pre><code>4\n</code></pre>\n<h3 id=\"List（列表）\"><a href=\"#List（列表）\" class=\"headerlink\" title=\"List（列表）\"></a>List（列表）</h3><p>使用 <code>[]</code> 或者 <code>list</code> 类型函数定义列表。</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">a_list &#x3D; [2, 3, 7, None]\ntup &#x3D; (&#39;foo&#39;, &#39;bar&#39;, &#39;baz&#39;)\nb_list &#x3D; list(tup)\nb_list\nb_list[1] &#x3D; &#39;peekaboo&#39;\nb_list</code></pre>\n\n\n\n\n<pre><code>[&#39;foo&#39;, &#39;peekaboo&#39;, &#39;baz&#39;]\n</code></pre>\n<p>使用 <code>list</code> 将迭代器或者生成器转化为列表。</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">gen &#x3D; range(10)\ngen</code></pre>\n\n\n\n\n<pre><code>range(0, 10)\n</code></pre>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">list(gen)</code></pre>\n\n\n\n\n<pre><code>[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]\n</code></pre>\n<h4 id=\"Adding-and-removing-elements（增加与移除元素）\"><a href=\"#Adding-and-removing-elements（增加与移除元素）\" class=\"headerlink\" title=\"Adding and removing elements（增加与移除元素）\"></a>Adding and removing elements（增加与移除元素）</h4><p><code>append</code> 方法将元素添加到列表尾部。</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">b_list.append(&#39;dwarf&#39;)\nb_list</code></pre>\n\n\n\n\n<pre><code>[&#39;foo&#39;, &#39;peekaboo&#39;, &#39;baz&#39;, &#39;dwarf&#39;]\n</code></pre>\n<p><code>insert</code> 方法将元素插入列表指定位置。</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">b_list.insert(1, &#39;red&#39;)\nb_list</code></pre>\n\n\n\n\n<pre><code>[&#39;foo&#39;, &#39;red&#39;, &#39;peekaboo&#39;, &#39;baz&#39;, &#39;dwarf&#39;]\n</code></pre>\n<p><code>pop</code> 方法将特定位置的元素移除并返回。</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">b_list.pop(2)\nb_list</code></pre>\n\n\n\n\n<pre><code>[&#39;foo&#39;, &#39;red&#39;, &#39;baz&#39;, &#39;dwarf&#39;]\n</code></pre>\n<p><code>remove</code> 方法将定位第一个符合要求的值并移除它。</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">b_list.append(&#39;foo&#39;)\nprint(b_list)\nb_list.remove(&#39;foo&#39;)\nb_list</code></pre>\n\n<pre><code>[&#39;foo&#39;, &#39;red&#39;, &#39;baz&#39;, &#39;dwarf&#39;, &#39;foo&#39;]\n\n\n\n\n\n[&#39;red&#39;, &#39;baz&#39;, &#39;dwarf&#39;, &#39;foo&#39;]\n</code></pre>\n<p><code>in</code> 关键字检查元素是否在列表中。</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">&#39;dwarf&#39; in b_list</code></pre>\n\n\n\n\n<pre><code>True\n</code></pre>\n<p><code>not</code> 用作 <code>in</code> 的反义词，表示“不在”。</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">&#39;dwarf&#39; not in b_list</code></pre>\n\n\n\n\n<pre><code>False\n</code></pre>\n<h4 id=\"Concatenating-and-combining-lists（连接和联合列表）\"><a href=\"#Concatenating-and-combining-lists（连接和联合列表）\" class=\"headerlink\" title=\"Concatenating and combining lists（连接和联合列表）\"></a>Concatenating and combining lists（连接和联合列表）</h4><p>用 <code>+</code> 连接列表。</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">[4, None, &#39;foo&#39;] + [7, 8, (2, 3)]</code></pre>\n\n\n\n\n<pre><code>[4, None, &#39;foo&#39;, 7, 8, (2, 3)]\n</code></pre>\n<p>用 <code>extend</code> 向列表尾部添加多个元素。</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">x &#x3D; [4, None, &#39;foo&#39;]\nx.extend([7, 8, (2, 3)])\nx</code></pre>\n\n\n\n\n<pre><code>[4, None, &#39;foo&#39;, 7, 8, (2, 3)]\n</code></pre>\n<p>当需要构建大列表时，用 <code>extend</code> 相比 <code>+</code> 代价更小，效率更高。</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">everything &#x3D; []\nfor chunk in list_of_lists:\n    everything.extend(chunk)</code></pre>\n\n<h4 id=\"Sorting（排序）\"><a href=\"#Sorting（排序）\" class=\"headerlink\" title=\"Sorting（排序）\"></a>Sorting（排序）</h4><p><code>sort</code> 方法对列表内部排序（不新建对象）</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">a &#x3D; [7, 2, 5, 1, 3]\na.sort()\na</code></pre>\n\n\n\n\n<pre><code>[1, 2, 3, 5, 7]\n</code></pre>\n<p>传递对应的关键字实现不同的方法，例如根据字符串的长度排序。</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">b &#x3D; [&#39;saw&#39;, &#39;small&#39;, &#39;He&#39;, &#39;foxes&#39;, &#39;six&#39;]\nb.sort(key&#x3D;len)\nb</code></pre>\n\n\n\n\n<pre><code>[&#39;He&#39;, &#39;saw&#39;, &#39;six&#39;, &#39;small&#39;, &#39;foxes&#39;]\n</code></pre>\n<h4 id=\"Binary-search-and-maintaining-a-sorted-list（二分搜索与已排序列表的维护）\"><a href=\"#Binary-search-and-maintaining-a-sorted-list（二分搜索与已排序列表的维护）\" class=\"headerlink\" title=\"Binary search and maintaining a sorted list（二分搜索与已排序列表的维护）\"></a>Binary search and maintaining a sorted list（二分搜索与已排序列表的维护）</h4><p>内建 <code>bisect</code> 模块实现了二分搜索和已排序列表的插值。<code>bisect.bisect</code> 会找到元素应当插入的位置，<code>bisect.insort</code> 将元素插入到相应位置。</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">import bisect\nc &#x3D; [1, 2, 2, 2, 3, 4, 7]\nbisect.bisect(c, 2)</code></pre>\n\n\n\n\n<pre><code>4\n</code></pre>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">bisect.bisect(c, 5)</code></pre>\n\n\n\n\n<pre><code>6\n</code></pre>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">bisect.insort(c, 6)\nc</code></pre>\n\n\n\n\n<pre><code>[1, 2, 2, 2, 3, 4, 6, 7]\n</code></pre>\n<h4 id=\"Slicing（切片）\"><a href=\"#Slicing（切片）\" class=\"headerlink\" title=\"Slicing（切片）\"></a>Slicing（切片）</h4><p>切片符号 <code>[起始位置:结束位置]</code>。</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">seq &#x3D; [7, 2, 3, 7, 5, 6, 0, 1]\nseq[1:5]</code></pre>\n\n\n\n\n<pre><code>[2, 3, 7, 5]\n</code></pre>\n<p>切片还可将序列赋给变量。</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">seq[3:4] &#x3D; [6, 3]\nseq</code></pre>\n\n\n\n\n<pre><code>[7, 2, 3, 6, 3, 5, 6, 0, 1]\n</code></pre>\n<p>起始位置的元素是包含的，结束位置的元素不包含，因此切片元素的数量是 <code>结束位置-起始位置</code>。</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">seq[:5]\nseq[3:]</code></pre>\n\n<p>从序列尾部索引。</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">seq[-4:]</code></pre>\n\n\n\n\n<pre><code>[5, 6, 0, 1]\n</code></pre>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">seq[-6:-2]</code></pre>\n\n\n\n\n<pre><code>[6, 3, 5, 6]\n</code></pre>\n<p>设置步进值。</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">seq[::2]</code></pre>\n\n\n\n\n<pre><code>[7, 3, 3, 6, 1]\n</code></pre>\n<p>翻转列表。</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">seq[::-1]</code></pre>\n\n\n\n\n<pre><code>[1, 0, 6, 5, 3, 6, 3, 2, 7]\n</code></pre>\n<h3 id=\"Built-in-Sequence-Functions（内建序列函数）\"><a href=\"#Built-in-Sequence-Functions（内建序列函数）\" class=\"headerlink\" title=\"Built-in Sequence Functions（内建序列函数）\"></a>Built-in Sequence Functions（内建序列函数）</h3><h4 id=\"enumerate\"><a href=\"#enumerate\" class=\"headerlink\" title=\"enumerate\"></a>enumerate</h4><p>遍历一个序列时需要追踪当前对象的索引。</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">i &#x3D; 0\nfor value in collection:\n   # do something with value\n   i +&#x3D; 1</code></pre>\n\n<p>内建 <code>enumerate</code> 函数可以返回 <code>(i, value)</code> 元组，其中 <code>value</code> 是元素值，<code>i</code> 是元素的索引。</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">for i, value in enumerate(collection):\n   # do something with value</code></pre>\n\n<p>当需要对数据建立索引时，可以使用 <code>enumerate</code> 构造一个字典，将列表元素值（如果是唯一的）映射到字典索引位置上。</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">some_list &#x3D; [&#39;foo&#39;, &#39;bar&#39;, &#39;baz&#39;]\nmapping &#x3D; &#123;&#125;\nfor i, v in enumerate(some_list):\n    mapping[v] &#x3D; i\nmapping</code></pre>\n\n\n\n\n<pre><code>&#123;&#39;foo&#39;: 0, &#39;bar&#39;: 1, &#39;baz&#39;: 2&#125;\n</code></pre>\n<h4 id=\"sorted\"><a href=\"#sorted\" class=\"headerlink\" title=\"sorted\"></a>sorted</h4><p>返回一个根据任意序列中元素新建的已排序列表。接受的参数与列表的 <code>sort</code> 方法一致。</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">sorted([7, 1, 2, 6, 0, 3, 2])</code></pre>\n\n\n\n\n<pre><code>[0, 1, 2, 2, 3, 6, 7]\n</code></pre>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">sorted(&#39;horse race&#39;)</code></pre>\n\n\n\n\n<pre><code>[&#39; &#39;, &#39;a&#39;, &#39;c&#39;, &#39;e&#39;, &#39;e&#39;, &#39;h&#39;, &#39;o&#39;, &#39;r&#39;, &#39;r&#39;, &#39;s&#39;]\n</code></pre>\n<h4 id=\"zip\"><a href=\"#zip\" class=\"headerlink\" title=\"zip\"></a>zip</h4><p>将列表、元组或其他序列的元素配对，新建一个元组构建的列表</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">seq1 &#x3D; [&#39;foo&#39;, &#39;bar&#39;, &#39;baz&#39;]\nseq2 &#x3D; [&#39;one&#39;, &#39;two&#39;, &#39;three&#39;]\nzipped &#x3D; zip(seq1, seq2)\nlist(zipped)</code></pre>\n\n\n\n\n<pre><code>[(&#39;foo&#39;, &#39;one&#39;), (&#39;bar&#39;, &#39;two&#39;), (&#39;baz&#39;, &#39;three&#39;)]\n</code></pre>\n<p>可以接受不同长度的序列，列表长度由<strong>最短</strong>的序列决定。</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">seq3 &#x3D; [False, True]\nlist(zip(seq1, seq2, seq3))</code></pre>\n\n\n\n\n<pre><code>[(&#39;foo&#39;, &#39;one&#39;, False), (&#39;bar&#39;, &#39;two&#39;, True)]\n</code></pre>\n<p>与 <code>enumerate</code> 合用同时遍历多个序列。</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">for i, (a, b) in enumerate(zip(seq1, seq2)):\n    print(&#39;&#123;0&#125;: &#123;1&#125;, &#123;2&#125;&#39;.format(i, a, b))</code></pre>\n\n<pre><code>0: foo, one\n1: bar, two\n2: baz, three\n</code></pre>\n<p>拆分一个已配对的序列。</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">pitchers &#x3D; [(&#39;Nolan&#39;, &#39;Ryan&#39;), (&#39;Roger&#39;, &#39;Clemens&#39;),\n            (&#39;Schilling&#39;, &#39;Curt&#39;)]\nfirst_names, last_names &#x3D; zip(*pitchers)\nprint(first_names, &quot;\\n&quot;, last_names)</code></pre>\n\n<pre><code>(&#39;Nolan&#39;, &#39;Roger&#39;, &#39;Schilling&#39;) \n (&#39;Ryan&#39;, &#39;Clemens&#39;, &#39;Curt&#39;)\n</code></pre>\n<h4 id=\"reversed\"><a href=\"#reversed\" class=\"headerlink\" title=\"reversed\"></a>reversed</h4><p>将列表倒序排列。</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">list(reversed(range(10)))</code></pre>\n\n\n\n\n<pre><code>[9, 8, 7, 6, 5, 4, 3, 2, 1, 0]\n</code></pre>\n<h3 id=\"dict（字典）\"><a href=\"#dict（字典）\" class=\"headerlink\" title=\"dict（字典）\"></a>dict（字典）</h3><p>又称<em>哈希表</em>或<em>关联数组</em>，是尺寸灵活的<em>键值对</em>集合。用 <code>&#123;&#125;</code> 创建。</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">empty_dict &#x3D; &#123;&#125;\nd1 &#x3D; &#123;&#39;a&#39; : &#39;some value&#39;, &#39;b&#39; : [1, 2, 3, 4]&#125;\nd1</code></pre>\n\n\n\n\n<pre><code>&#123;&#39;a&#39;: &#39;some value&#39;, &#39;b&#39;: [1, 2, 3, 4]&#125;\n</code></pre>\n<p>访问、插入和设置字典中元素。</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">d1[7] &#x3D; &#39;an integer&#39;\nd1</code></pre>\n\n\n\n\n<pre><code>&#123;&#39;a&#39;: &#39;some value&#39;, &#39;b&#39;: [1, 2, 3, 4], 7: &#39;an integer&#39;&#125;\n</code></pre>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">d1[&#39;b&#39;]</code></pre>\n\n\n\n\n<pre><code>[1, 2, 3, 4]\n</code></pre>\n<p>检查字典中是否有一个键。</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">&#39;b&#39; in d1</code></pre>\n\n\n\n\n<pre><code>True\n</code></pre>\n<p>用 <code>del</code> 和 <code>pop</code> 方法删除值，<code>pop</code> 方法在删除的同时返回被删的值，并删除键。</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">d1[5] &#x3D; &#39;some value&#39;\nprint(d1)\n\nd1[&#39;dummy&#39;] &#x3D; &#39;another value&#39;\nprint(d1)\n\ndel d1[5]\nprint(d1)\n\nret &#x3D; d1.pop(&#39;dummy&#39;)\nprint(ret)\nprint(d1)</code></pre>\n\n<pre><code>&#123;&#39;a&#39;: &#39;some value&#39;, &#39;b&#39;: [1, 2, 3, 4], 7: &#39;an integer&#39;, 5: &#39;some value&#39;&#125;\n&#123;&#39;a&#39;: &#39;some value&#39;, &#39;b&#39;: [1, 2, 3, 4], 7: &#39;an integer&#39;, 5: &#39;some value&#39;, &#39;dummy&#39;: &#39;another value&#39;&#125;\n&#123;&#39;a&#39;: &#39;some value&#39;, &#39;b&#39;: [1, 2, 3, 4], 7: &#39;an integer&#39;, &#39;dummy&#39;: &#39;another value&#39;&#125;\nanother value\n&#123;&#39;a&#39;: &#39;some value&#39;, &#39;b&#39;: [1, 2, 3, 4], 7: &#39;an integer&#39;&#125;\n</code></pre>\n<p><code>keys</code> 和 <code>values</code> 分别返回字典键、值的迭代器，顺序与字典的顺序对应。</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">list(d1.keys())</code></pre>\n\n\n\n\n<pre><code>[&#39;a&#39;, &#39;b&#39;, 7]\n</code></pre>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">list(d1.values())</code></pre>\n\n\n\n\n<pre><code>[&#39;some value&#39;, [1, 2, 3, 4], &#39;an integer&#39;]\n</code></pre>\n<p><code>update</code> 方法将两个字典合并。</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">d1.update(&#123;&#39;b&#39; : &#39;foo&#39;, &#39;c&#39; : 12&#125;)\nd1</code></pre>\n\n\n\n\n<pre><code>&#123;&#39;a&#39;: &#39;some value&#39;, &#39;b&#39;: &#39;foo&#39;, 7: &#39;an integer&#39;, &#39;c&#39;: 12&#125;\n</code></pre>\n<p>如果传给 <code>update</code> 方法的数据中包含与字典相同的键，则其键值将被覆盖。</p>\n<h4 id=\"Creating-dicts-from-sequences（从序列生成字典）\"><a href=\"#Creating-dicts-from-sequences（从序列生成字典）\" class=\"headerlink\" title=\"Creating dicts from sequences（从序列生成字典）\"></a>Creating dicts from sequences（从序列生成字典）</h4><p>构建包含两个序列的字典，键值按元素配对。</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">mapping &#x3D; &#123;&#125;\nfor key, value in zip(key_list, value_list):\n    mapping[key] &#x3D; value</code></pre>\n\n<p>也可通过接受一个2-元组（含有两个元素的元组）的列表构建。</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">mapping &#x3D; dict(zip(range(5), reversed(range(5))))\nmapping</code></pre>\n\n\n\n\n<pre><code>&#123;0: 4, 1: 3, 2: 2, 3: 1, 4: 0&#125;\n</code></pre>\n<h4 id=\"Default-values（默认值）\"><a href=\"#Default-values（默认值）\" class=\"headerlink\" title=\"Default values（默认值）\"></a>Default values（默认值）</h4><p>设置字典默认值的算法。</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">if key in some_dict:\n    value &#x3D; some_dict[key]\nelse:\n    value &#x3D; default_value</code></pre>\n\n<p>字典的 <code>get</code> 和 <code>pop</code> 方法可以返回一个默认值。</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">value &#x3D; some_dict.get(key, default_value)</code></pre>\n\n<p>带默认值的 <code>get</code> 方法在 key 参数不是字典键时返回 <code>None</code>，而 <code>pop</code> 会抛出异常。</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">words &#x3D; [&#39;apple&#39;, &#39;bat&#39;, &#39;bar&#39;, &#39;atom&#39;, &#39;book&#39;]\nby_letter &#x3D; &#123;&#125;\nfor word in words:\n    letter &#x3D; word[0]\n    if letter not in by_letter:\n        by_letter[letter] &#x3D; [word]\n    else:\n        by_letter[letter].append(word)\nby_letter</code></pre>\n\n\n\n\n<pre><code>&#123;&#39;a&#39;: [&#39;apple&#39;, &#39;atom&#39;], &#39;b&#39;: [&#39;bat&#39;, &#39;bar&#39;, &#39;book&#39;]&#125;\n</code></pre>\n<p>上述分类算法可简写为：</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">by_letter &#x3D; &#123;&#125;\nfor word in words:\n    letter &#x3D; word[0]\n    by_letter.setdefault(letter, []).append(word)\nby_letter</code></pre>\n\n\n\n\n<pre><code>&#123;&#39;a&#39;: [&#39;apple&#39;, &#39;atom&#39;], &#39;b&#39;: [&#39;bat&#39;, &#39;bar&#39;, &#39;book&#39;]&#125;\n</code></pre>\n<p>也可使用内建的集合模块中的类 <code>defaultdict</code>，进一步简化算法。</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">from collections import defaultdict\nby_letter &#x3D; defaultdict(list)\nfor word in words:\n    by_letter[word[0]].append(word)\nby_letter</code></pre>\n\n\n\n\n<pre><code>defaultdict(list, &#123;&#39;a&#39;: [&#39;apple&#39;, &#39;atom&#39;], &#39;b&#39;: [&#39;bat&#39;, &#39;bar&#39;, &#39;book&#39;]&#125;)\n</code></pre>\n<h4 id=\"Valid-dict-key-types（有效字典键类型）\"><a href=\"#Valid-dict-key-types（有效字典键类型）\" class=\"headerlink\" title=\"Valid dict key types（有效字典键类型）\"></a>Valid dict key types（有效字典键类型）</h4><p>键必须为不可变对象。可以通过 <code>hash</code> 函数检查一个对象是否可以哈希化（是否可用作字典的键）。 </p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">hash(&#39;string&#39;)</code></pre>\n\n\n\n\n<pre><code>8227767748255084375\n</code></pre>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">hash((1, 2, (2, 3)))</code></pre>\n\n\n\n\n<pre><code>1097636502276347782\n</code></pre>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">hash((1, 2, [2, 3])) # fails because lists are mutable</code></pre>\n\n\n<pre><code>---------------------------------------------------------------------------\n\nTypeError                                 Traceback (most recent call last)\n\n&lt;ipython-input-26-473c35a62c0b&gt; in &lt;module&gt;\n----&gt; 1 hash((1, 2, [2, 3])) # fails because lists are mutable\n\n\nTypeError: unhashable type: &#39;list&#39;\n</code></pre>\n<p>为使列表作键，可将其转换为元组。</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">d &#x3D; &#123;&#125;\nd[tuple([1, 2, 3])] &#x3D; 5\nd</code></pre>\n\n\n\n\n<pre><code>&#123;(1, 2, 3): 5&#125;\n</code></pre>\n<h3 id=\"set（集合）\"><a href=\"#set（集合）\" class=\"headerlink\" title=\"set（集合）\"></a>set（集合）</h3><p>集合只有键没有值（因此集合中相同的元素会被合并），通过 <code>set</code> 函数或 <code>&#123;&#125;</code> 创建。</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">set([2, 2, 2, 1, 3, 3])</code></pre>\n\n\n\n\n<pre><code>&#123;1, 2, 3&#125;\n</code></pre>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">&#123;2, 2, 2, 1, 3, 3&#125;</code></pre>\n\n\n\n\n<pre><code>&#123;1, 2, 3&#125;\n</code></pre>\n<p>支持数学上的集合操作，如交、并、补和差集。</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">a &#x3D; &#123;1, 2, 3, 4, 5&#125;\nb &#x3D; &#123;3, 4, 5, 6, 7, 8&#125;</code></pre>\n\n<p>并集。（使用 <code>union</code> 或 <code>|</code> 创建）</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">print(a.union(b))\nprint(a | b)</code></pre>\n\n<pre><code>&#123;1, 2, 3, 4, 5, 6, 7, 8&#125;\n&#123;1, 2, 3, 4, 5, 6, 7, 8&#125;\n</code></pre>\n<p>交集。（使用 <code>intersection</code> 或 <code>&amp;</code> 创建）</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">print(a.intersection(b), a &amp; b)</code></pre>\n\n<pre><code>&#123;3, 4, 5&#125; &#123;3, 4, 5&#125;\n</code></pre>\n<p>对于大型集合，下面的代码效率更高。</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">c &#x3D; a.copy()\nc |&#x3D; b\nprint(c)\nd &#x3D; a.copy()\nd &amp;&#x3D; b\nprint(d)</code></pre>\n\n<pre><code>&#123;1, 2, 3, 4, 5, 6, 7, 8&#125;\n&#123;3, 4, 5&#125;\n</code></pre>\n<p>集合的元素必须是不可变的。</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">my_data &#x3D; [1, 2, 3, 4]\nmy_set &#x3D; &#123;tuple(my_data)&#125;\nmy_set</code></pre>\n\n\n\n\n<pre><code>&#123;(1, 2, 3, 4)&#125;\n</code></pre>\n<p>检查一个集合是否是另一个集合的子集（包含于）或超集（被包含）。</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">a_set &#x3D; &#123;1, 2, 3, 4, 5&#125;\n&#123;1, 2, 3&#125;.issubset(a_set)</code></pre>\n\n\n\n\n<pre><code>True\n</code></pre>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">a_set.issuperset(&#123;1, 2, 3&#125;)</code></pre>\n\n\n\n\n<pre><code>True\n</code></pre>\n<p>仅当两个集合内容一模一样时两个集合才相等。</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">&#123;1, 2, 3&#125; &#x3D;&#x3D; &#123;3, 2, 1&#125;</code></pre>\n\n\n\n\n<pre><code>True\n</code></pre>\n<h3 id=\"List-Set-and-Dict-Comprehensions（列表、集合和字典的推导式）\"><a href=\"#List-Set-and-Dict-Comprehensions（列表、集合和字典的推导式）\" class=\"headerlink\" title=\"List, Set, and Dict Comprehensions（列表、集合和字典的推导式）\"></a>List, Set, and Dict Comprehensions（列表、集合和字典的推导式）</h3><p>列表推导式的基本形式：</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">[expr for val in collection if condition]</code></pre>\n\n<p>其可等同于如下语句：</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">result &#x3D; []\nfor val in collection:\n    if condition\n        result.append(expr)</code></pre>\n\n<p>过滤条件可以忽略。下面字符串中长度大于2的字符串改为大写。</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">strings &#x3D; [&#39;a&#39;, &#39;as&#39;, &#39;bat&#39;, &#39;car&#39;, &#39;dove&#39;, &#39;python&#39;]\n[x.upper() for x in strings if len(x) &gt; 2]</code></pre>\n\n\n\n\n<pre><code>[&#39;BAT&#39;, &#39;CAR&#39;, &#39;DOVE&#39;, &#39;PYTHON&#39;]\n</code></pre>\n<p>字典推导式：</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">dict_comp &#x3D; &#123;key-expr: value-expr for value in collection if condition&#125;</code></pre>\n\n<p>集合推导式：</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">set_comp &#x3D; &#123;expr for value in collection if condition&#125;</code></pre>\n\n<p>创建一个包含列表中字符串长度的集合。</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">unique_lengths &#x3D; &#123;len(x) for x in strings&#125;\nunique_lengths</code></pre>\n\n\n\n\n<pre><code>&#123;1, 2, 3, 4, 6&#125;\n</code></pre>\n<p>使用 <code>map</code> 函数可以更简洁实现这一功能。</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">set(map(len, strings))</code></pre>\n\n\n\n\n<pre><code>&#123;1, 2, 3, 4, 6&#125;\n</code></pre>\n<p>创建一个将字符串与其位置相匹配的字典。</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">loc_mapping &#x3D; &#123;val : index for index, val in enumerate(strings)&#125;\nloc_mapping</code></pre>\n\n\n\n\n<pre><code>&#123;&#39;a&#39;: 0, &#39;as&#39;: 1, &#39;bat&#39;: 2, &#39;car&#39;: 3, &#39;dove&#39;: 4, &#39;python&#39;: 5&#125;\n</code></pre>\n<h4 id=\"Nested-list-comprehensions（嵌套列表推导式）\"><a href=\"#Nested-list-comprehensions（嵌套列表推导式）\" class=\"headerlink\" title=\"Nested list comprehensions（嵌套列表推导式）\"></a>Nested list comprehensions（嵌套列表推导式）</h4><pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">all_data &#x3D; [[&#39;John&#39;, &#39;Emily&#39;, &#39;Michael&#39;, &#39;Mary&#39;, &#39;Steven&#39;],\n            [&#39;Maria&#39;, &#39;Juan&#39;, &#39;Javier&#39;, &#39;Natalia&#39;, &#39;Pilar&#39;]]</code></pre>\n\n<p>通过 <code>for</code> 循环获得上述列表中包含2个以上 e 字母的名字。</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">names_of_interest &#x3D; []\nfor names in all_data:\n    enough_es &#x3D; [name for name in names if name.count(&#39;e&#39;) &gt;&#x3D; 2]\n    names_of_interest.extend(enough_es)</code></pre>\n\n<p>通过嵌套列表推导式表达上述语句：</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">result &#x3D; [name for names in all_data for name in names\n          if name.count(&#39;e&#39;) &gt;&#x3D; 2]\nresult</code></pre>\n\n\n\n\n<pre><code>[&#39;Steven&#39;]\n</code></pre>\n<p>其中 <code>for</code> 循环部分是根据嵌套的顺序排列的。</p>\n<p>将含有整数元组的列表扁平3为一个简单的整数列表。</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">some_tuples &#x3D; [(1, 2, 3), (4, 5, 6), (7, 8, 9)]\nflattened &#x3D; [x for tup in some_tuples for x in tup]\nflattened</code></pre>\n\n\n\n\n<pre><code>[1, 2, 3, 4, 5, 6, 7, 8, 9]\n</code></pre>\n<p><code>for</code> 表达式的顺序应与写嵌套 <code>for</code> 语句时的顺序一致。</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">flattened &#x3D; []\n\nfor tup in some_tuples:\n    for x in tup:\n        flattened.append(x)\nflattened</code></pre>\n\n\n\n\n<pre><code>[1, 2, 3, 4, 5, 6, 7, 8, 9]\n</code></pre>\n<p>嵌套推导式要和列表推导式中的列表推导式区分：</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">[[x for x in tup] for tup in some_tuples]</code></pre>\n\n\n\n\n<pre><code>[[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n</code></pre>\n<h2 id=\"Functions（函数）\"><a href=\"#Functions（函数）\" class=\"headerlink\" title=\"Functions（函数）\"></a>Functions（函数）</h2><p>函数声明使用 <code>def</code> 关键字，返回使用 <code>return</code> 关键字。</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">def my_function(x, y, z&#x3D;1.5):\n    if z &gt; 1:\n        return z * (x + y)\n    else:\n        return z &#x2F; (x + y)</code></pre>\n\n<p>上述函数中 <code>x</code> <code>y</code> 是位置参数，<code>z</code> 是关键字参数。</p>\n<p>其调用方式为</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">my_function(5, 6, z&#x3D;0.7)\nmy_function(3.14, 7, 3.5)\nmy_function(10, 20)</code></pre>\n\n<h3 id=\"Namespaces-Scope-and-Local-Functions（命名空间、作用域和本地函数）\"><a href=\"#Namespaces-Scope-and-Local-Functions（命名空间、作用域和本地函数）\" class=\"headerlink\" title=\"Namespaces, Scope, and Local Functions（命名空间、作用域和本地函数）\"></a>Namespaces, Scope, and Local Functions（命名空间、作用域和本地函数）</h3><p>在函数内部，任意变量都是默认分配到本地命名空间。函数执行后，本地命名空间就会被销毁。下例中，<code>a</code> 在函数退出后被销毁。</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">def func():\n    a &#x3D; []\n    for i in range(5):\n        a.append(i)</code></pre>\n\n<p>可以像下面这样声明 <code>a</code>：</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">a &#x3D; []\ndef func():\n    for i in range(5):\n        a.append(i)\nfunc()\na</code></pre>\n\n\n\n\n<pre><code>[0, 1, 2, 3, 4]\n</code></pre>\n<p>用 <code>global</code> 关键字声明变量为全局变量。</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">a &#x3D; None\ndef bind_a_variable():\n    global a\n    a &#x3D; []\nbind_a_variable()\nprint(a)</code></pre>\n\n<pre><code>[]\n</code></pre>\n<h3 id=\"Returning-Multiple-Values（返回多个值）\"><a href=\"#Returning-Multiple-Values（返回多个值）\" class=\"headerlink\" title=\"Returning Multiple Values（返回多个值）\"></a>Returning Multiple Values（返回多个值）</h3><p>从函数中返回多个值。</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">def f():\n    a &#x3D; 5\n    b &#x3D; 6\n    c &#x3D; 7\n    return a, b, c\n\na, b, c &#x3D; f()</code></pre>\n\n<p>用一下代码进行代替，返回的 <code>return_value</code> 是一个3-元组</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">return_value &#x3D; f()</code></pre>\n\n<p>也可以这样实现。</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">def f():\n    a &#x3D; 5\n    b &#x3D; 6\n    c &#x3D; 7\n    return &#123;&#39;a&#39; : a, &#39;b&#39; : b, &#39;c&#39; : c&#125;</code></pre>\n\n<h3 id=\"Functions-Are-Objects（函数是对象）\"><a href=\"#Functions-Are-Objects（函数是对象）\" class=\"headerlink\" title=\"Functions Are Objects（函数是对象）\"></a>Functions Are Objects（函数是对象）</h3><pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">states &#x3D; [&#39;   Alabama &#39;, &#39;Georgia!&#39;, &#39;Georgia&#39;, &#39;georgia&#39;, &#39;FlOrIda&#39;,\n          &#39;south   carolina##&#39;, &#39;West virginia?&#39;]</code></pre>\n\n<p>定义函数<code>clean_strings</code> 整理上述字符串（调用正则化模块 <code>re</code>）。</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">import re\n\ndef clean_strings(strings):\n    result &#x3D; []\n    for value in strings:\n        value &#x3D; value.strip()                 # 去除前后空格\n        value &#x3D; re.sub(&#39;[!#?]&#39;, &#39;&#39;, value)    # 移除标点符号\n        value &#x3D; value.title()                 # 调整大小写\n        result.append(value)\n    return result</code></pre>\n\n\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">clean_strings(states)</code></pre>\n\n\n\n\n<pre><code>[&#39;Alabama&#39;,\n &#39;Georgia&#39;,\n &#39;Georgia&#39;,\n &#39;Georgia&#39;,\n &#39;Florida&#39;,\n &#39;South   Carolina&#39;,\n &#39;West Virginia&#39;]\n</code></pre>\n<p>因为函数是对象，也可以以列表形式将函数以参数的方式传递给其他函数。</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">def remove_punctuation(value):\n    return re.sub(&#39;[!#?]&#39;, &#39;&#39;, value)\n\nclean_ops &#x3D; [str.strip, remove_punctuation, str.title]\n\ndef clean_strings(strings, ops):\n    result &#x3D; []\n    for value in strings:\n        for function in ops:\n            value &#x3D; function(value)\n        result.append(value)\n    return result</code></pre>\n\n\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">clean_strings(states, clean_ops)</code></pre>\n\n\n\n\n<pre><code>[&#39;Alabama&#39;,\n &#39;Georgia&#39;,\n &#39;Georgia&#39;,\n &#39;Georgia&#39;,\n &#39;Florida&#39;,\n &#39;South   Carolina&#39;,\n &#39;West Virginia&#39;]\n</code></pre>\n<p>内建 <code>map</code> 函数也可将一个函数应用到一个序列上。</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">for x in map(remove_punctuation, states):\n    print(x)</code></pre>\n\n<pre><code>   Alabama \nGeorgia\nGeorgia\ngeorgia\nFlOrIda\nsouth   carolina\nWest virginia\n</code></pre>\n<h3 id=\"Anonymous-Lambda-Functions（匿名函数）\"><a href=\"#Anonymous-Lambda-Functions（匿名函数）\" class=\"headerlink\" title=\"Anonymous (Lambda) Functions（匿名函数）\"></a>Anonymous (Lambda) Functions（匿名函数）</h3><p><em>匿名</em>函数（也称 <em>lambda</em> 函数）是指通过单个语句定义函数的方式，其结果为返回值。匿名函数通过使用 <code>lambda</code> 关键字定义。</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">def short_function(x):\n    return x * 2\n\nequiv_anon &#x3D; lambda x: x * 2\nequiv_anon(2)</code></pre>\n\n\n\n\n<pre><code>4\n</code></pre>\n<p>匿名函数代码量小，也可作为参数进行传值。</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">def apply_to_list(some_list, f):\n    return [f(x) for x in some_list]\n\nints &#x3D; [4, 0, 1, 5, 6]\napply_to_list(ints, lambda x: x * 2)</code></pre>\n\n\n\n\n<pre><code>[8, 0, 2, 10, 12]\n</code></pre>\n<p>将下例字符串按不同字母的数量排序，可以将一个匿名函数（即将每个列表中的每个元素转换成集合，并根据转换后集合的长度对列表中的元素排序）传给列表的 <code>sort</code> 方法。</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">strings &#x3D; [&#39;foo&#39;, &#39;card&#39;, &#39;bar&#39;, &#39;aaaa&#39;, &#39;abab&#39;]</code></pre>\n\n\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">strings.sort(key&#x3D;lambda x: len(set(list(x))))\nstrings</code></pre>\n\n\n\n\n<pre><code>[&#39;aaaa&#39;, &#39;foo&#39;, &#39;abab&#39;, &#39;bar&#39;, &#39;card&#39;]\n</code></pre>\n<h3 id=\"Currying-Partial-Argument-Application（柯里化：部分参数应用）\"><a href=\"#Currying-Partial-Argument-Application（柯里化：部分参数应用）\" class=\"headerlink\" title=\"Currying: Partial Argument Application（柯里化：部分参数应用）\"></a>Currying: Partial Argument Application（柯里化：部分参数应用）</h3><p>通过已有函数定义一个新的函数。</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">def add_numbers(x, y):\n    return x + y</code></pre>\n\n\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">add_five &#x3D; lambda y: add_numbers(5, y)\nadd_five(5)</code></pre>\n\n\n\n\n<pre><code>10\n</code></pre>\n<p>也可以使用内建模块 <code>functools</code> 中的 <code>partial</code> 函数简化这种处理。</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">partial?</code></pre>\n\n\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">from functools import partial\nadd_five &#x3D; partial(add_numbers, 5)</code></pre>\n\n<h3 id=\"Generators（生成器）\"><a href=\"#Generators（生成器）\" class=\"headerlink\" title=\"Generators（生成器）\"></a>Generators（生成器）</h3><p>通过一致的方式遍历序列，例如按行遍历文件中的内容或按元素遍历列表，这种特性是通过<em>迭代器协议</em>实现的。迭代器协议是一种令对象可遍历的通用方式。例如遍历一个字典的键：</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">some_dict &#x3D; &#123;&#39;a&#39;: 1, &#39;b&#39;: 2, &#39;c&#39;: 3&#125;\nfor key in some_dict:\n    print(key)</code></pre>\n\n<pre><code>a\nb\nc\n</code></pre>\n<p>Python 先尝试根据 <code>some_dict</code> 生成一个迭代器：</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">dict_iterator &#x3D; iter(some_dict)\ndict_iterator</code></pre>\n\n\n\n\n<pre><code>&lt;dict_keyiterator at 0x1df1f383ea8&gt;\n</code></pre>\n<p>迭代器是一种用于在上下文中（如 <code>for</code> 循环）像 Python 解释器生成对象的对象。接受迭代器的方法包括大部分以列表或列表型对象为参数的方法，包括但不限于 <code>min</code>、<code>max</code> 和 <code>sum</code>，以及类型构造函数如 <code>list</code> 和 <code>tuple</code>：</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">list(dict_iterator)</code></pre>\n\n\n\n\n<pre><code>[&#39;a&#39;, &#39;b&#39;, &#39;c&#39;]\n</code></pre>\n<p>生成器用于构造新的可遍历对象：生成器会返回一个多结果序列，在每个元素产生后暂停，直到接受下一个请求。如需创建生成器，只需将关键字 <code>return</code> 替换为 <code>yield</code>。</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">def squares(n&#x3D;10):\n    print(&#39;Generating squares from 1 to &#123;0&#125;&#39;.format(n ** 2))\n    for i in range(1, n + 1):\n        yield i ** 2</code></pre>\n\n<p>当调用生成器时代码不会被真正执行。</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">gen &#x3D; squares()\ngen</code></pre>\n\n\n\n\n<pre><code>&lt;generator object squares at 0x000001DF1F2CC408&gt;\n</code></pre>\n<p>直到请求生成器中元素时代码才会被执行。</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">for x in gen:\n    print(x, end&#x3D;&#39; &#39;)</code></pre>\n\n<pre><code>Generating squares from 1 to 100\n1 4 9 16 25 36 49 64 81 100 \n</code></pre>\n<h4 id=\"Generator-expresssions（生成器表达式）\"><a href=\"#Generator-expresssions（生成器表达式）\" class=\"headerlink\" title=\"Generator expresssions（生成器表达式）\"></a>Generator expresssions（生成器表达式）</h4><p>与列表推导式类似，可以用生成器表达式创建生成器，此时需要将列表推导式的 <code>[]</code> 改为 <code>()</code>。</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">gen &#x3D; (x ** 2 for x in range(100))\ngen</code></pre>\n\n\n\n\n<pre><code>&lt;generator object &lt;genexpr&gt; at 0x000001DF1F2CC390&gt;\n</code></pre>\n<p>上述代码效果与下面的代码效果等价。</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">def _make_gen():\n    for x in range(100):\n        yield x ** 2\ngen &#x3D; _make_gen()</code></pre>\n\n<p>也可作为参数传递给接受迭代器对象的函数。</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">sum(x ** 2 for x in range(100))</code></pre>\n\n\n\n\n<pre><code>328350\n</code></pre>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">dict((i, i **2) for i in range(5))</code></pre>\n\n\n\n\n<pre><code>&#123;0: 0, 1: 1, 2: 4, 3: 9, 4: 16&#125;\n</code></pre>\n<h4 id=\"itertools-module（itertools-模块）\"><a href=\"#itertools-module（itertools-模块）\" class=\"headerlink\" title=\"itertools module（itertools 模块）\"></a>itertools module（itertools 模块）</h4><p>itertools 模块包含大多数数据算法的生成器集合。例如通过 <code>groupby</code> 根据任意函数的返回值（<code>key</code>）对任意序列中的元素（<code>sub-iterator</code>）进行分组（即返回 <code>(key, sub-iterator)</code> 元组）。</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">import itertools\nfirst_letter &#x3D; lambda x: x[0]\nnames &#x3D; [&#39;Alan&#39;, &#39;Adam&#39;, &#39;Wes&#39;, &#39;Will&#39;, &#39;Albert&#39;, &#39;Steven&#39;]\nfor letter, names in itertools.groupby(names, first_letter):\n    print(letter, list(names)) # names is a generator</code></pre>\n\n<pre><code>A [&#39;Alan&#39;, &#39;Adam&#39;]\nW [&#39;Wes&#39;, &#39;Will&#39;]\nA [&#39;Albert&#39;]\nS [&#39;Steven&#39;]\n</code></pre>\n<h3 id=\"Errors-and-Exception-Handling（错误和异常处理）\"><a href=\"#Errors-and-Exception-Handling（错误和异常处理）\" class=\"headerlink\" title=\"Errors and Exception Handling（错误和异常处理）\"></a>Errors and Exception Handling（错误和异常处理）</h3><p><code>ValueError</code>（输入参数值错误）：</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">float(&#39;1.2345&#39;)</code></pre>\n\n\n\n\n<pre><code>1.2345\n</code></pre>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">float(&#39;something&#39;)</code></pre>\n\n\n<pre><code>---------------------------------------------------------------------------\n\nValueError                                Traceback (most recent call last)\n\n&lt;ipython-input-72-2649e4ade0e6&gt; in &lt;module&gt;\n----&gt; 1 float(&#39;something&#39;)\n\n\nValueError: could not convert string to float: &#39;something&#39;\n</code></pre>\n<p>可以写入一个 <code>try/except</code> 代码段。</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">def attempt_float(x):\n    try:\n        return float(x)\n    except:\n        return x</code></pre>\n\n<p>如果 <code>attempt_float(x)</code> 执行时出现异常，则执行 <code>except</code> 段的代码。</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">attempt_float(&#39;1.2345&#39;)</code></pre>\n\n\n\n\n<pre><code>1.2345\n</code></pre>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">attempt_float(&#39;something&#39;)</code></pre>\n\n\n\n\n<pre><code>&#39;something&#39;\n</code></pre>\n<p><code>TypeError</code>（语法错误）：</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">float((1, 2))</code></pre>\n\n\n<pre><code>---------------------------------------------------------------------------\n\nTypeError                                 Traceback (most recent call last)\n\n&lt;ipython-input-76-82f777b0e564&gt; in &lt;module&gt;\n----&gt; 1 float((1, 2))\n\n\nTypeError: float() argument must be a string or a number, not &#39;tuple&#39;\n</code></pre>\n<p>可以通过将多个异常类型写成元组的方式同时捕获多个异常（小括号必不可少）：</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">def attempt_float(x):\n    try:\n        return float(x)\n    except (TypeError, ValueError):\n        return x</code></pre>\n\n\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">attempt_float((1, 2))</code></pre>\n\n\n\n\n<pre><code>(1, 2)\n</code></pre>\n<p>使用关键字 <code>finally</code>，当无论程序是否报错时都要执行该部分的代码。</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">f &#x3D; open(path, &#39;w&#39;)\n\ntry:\n    write_to_file(f)\nfinally:\n    f.close()</code></pre>\n\n<p>这样可以使 <code>f</code> 在程序结束后总能被关闭。</p>\n<p>可以使用 <code>else</code> 来执行当 <code>try</code> 代码块执行成功后才会执行的代码。</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">f &#x3D; open(path, &#39;w&#39;)\n\ntry:\n    write_to_file(f)\nexcept:\n    print(&#39;Failed&#39;)\nelse:\n    print(&#39;Succeeded&#39;)\nfinally:\n    f.close()</code></pre>\n\n<h4 id=\"Exceptions-in-IPython（IPython-中的异常）\"><a href=\"#Exceptions-in-IPython（IPython-中的异常）\" class=\"headerlink\" title=\"Exceptions in IPython（IPython 中的异常）\"></a>Exceptions in IPython（IPython 中的异常）</h4><p>用 <code>%run</code> 执行脚本或语句时报错，IPython 会默认打印出完整的报错追溯。</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">%run examples&#x2F;ipython_bug.py</code></pre>\n\n\n<pre><code>---------------------------------------------------------------------------\n\nAssertionError                            Traceback (most recent call last)\n\nE:\\Ranhui\\Onedrive\\OneDrive - ryanhui\\Memo\\Notes&amp;Materials\\pydata-book-2nd-edition\\examples\\ipython_bug.py in &lt;module&gt;\n     13     throws_an_exception()\n     14 \n---&gt; 15 calling_things()\n\n\nE:\\Ranhui\\Onedrive\\OneDrive - ryanhui\\Memo\\Notes&amp;Materials\\pydata-book-2nd-edition\\examples\\ipython_bug.py in calling_things()\n     11 def calling_things():\n     12     works_fine()\n---&gt; 13     throws_an_exception()\n     14 \n     15 calling_things()\n\n\nE:\\Ranhui\\Onedrive\\OneDrive - ryanhui\\Memo\\Notes&amp;Materials\\pydata-book-2nd-edition\\examples\\ipython_bug.py in throws_an_exception()\n      7     a = 5\n      8     b = 6\n----&gt; 9     assert(a + b == 10)\n     10 \n     11 def calling_things():\n\n\nAssertionError: \n</code></pre>\n<p>可以使用 <code>%xmode</code> 命令控制上下文的数量。</p>\n<h2 id=\"Files-and-the-Operating-System（文件和操作系统）\"><a href=\"#Files-and-the-Operating-System（文件和操作系统）\" class=\"headerlink\" title=\"Files and the Operating System（文件和操作系统）\"></a>Files and the Operating System（文件和操作系统）</h2><pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">%pushd?</code></pre>\n\n\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">%pushd book-materials</code></pre>\n\n<pre><code>[WinError 2] The system cannot find the file specified: &#39;book-materials&#39;\nE:\\Ranhui\\Onedrive\\OneDrive - ryanhui\\Memo\\Notes&amp;Materials\\pydata-book-2nd-edition\n\n\n\n\n\n[&#39;E:\\\\Ranhui\\\\Onedrive\\\\OneDrive - ryanhui\\\\Memo\\\\Notes&amp;Materials\\\\pydata-book-2nd-edition&#39;]\n</code></pre>\n<p>打开文件。默认情况下文件是以只读模式 <code>&#39;r&#39;</code> 打开的，之后可以像处理列表一样处理文件。</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">path &#x3D; &#39;examples&#x2F;segismundo.txt&#39;\nf &#x3D; open(path, encoding&#x3D;&#39;utf-8&#39;)\nf</code></pre>\n\n\n\n\n<pre><code>&lt;_io.TextIOWrapper name=&#39;examples/segismundo.txt&#39; mode=&#39;r&#39; encoding=&#39;utf-8&#39;&gt;\n</code></pre>\n<p>遍历文件 <code>f</code> 的行内容。</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">for line in f:\n    pass</code></pre>\n\n<p>行内容会在行结尾标识（EOL）完整的情况下从文件中全部读出。</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">lines &#x3D; [x.rstrip() for x in open(path)]\nlines</code></pre>\n\n\n\n\n<pre><code>[&#39;Sue帽a el rico en su riqueza,&#39;,\n &#39;que m谩s cuidados le ofrece;&#39;,\n &#39;&#39;,\n &#39;sue帽a el pobre que padece&#39;,\n &#39;su miseria y su pobreza;&#39;,\n &#39;&#39;,\n &#39;sue帽a el que a medrar empieza,&#39;,\n &#39;sue帽a el que afana y pretende,&#39;,\n &#39;sue帽a el que agravia y ofende,&#39;,\n &#39;&#39;,\n &#39;y en el mundo, en conclusi贸n,&#39;,\n &#39;todos sue帽an lo que son,&#39;,\n &#39;aunque ninguno lo entiende.&#39;,\n &#39;&#39;]\n</code></pre>\n<p>当使用 <code>open</code> 创建文件时，在操作结束后显式地关闭文件是非常重要的。</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"></code></pre>\n\n\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">f.close()</code></pre>\n\n\n\n\n<pre><code>&lt;_io.TextIOWrapper name=&#39;examples/segismundo.txt&#39; mode=&#39;r&#39; encoding=&#39;utf-8&#39;&gt;\n</code></pre>\n<p>使用 <code>with</code> 语句，文件在 <code>with</code> 代码块结束后自动关闭。</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">with open(path) as f:\n    lines &#x3D; [x.rstrip() for x in f]\nlines</code></pre>\n\n\n\n\n<pre><code>[&#39;Sue帽a el rico en su riqueza,&#39;,\n &#39;que m谩s cuidados le ofrece;&#39;,\n &#39;&#39;,\n &#39;sue帽a el pobre que padece&#39;,\n &#39;su miseria y su pobreza;&#39;,\n &#39;&#39;,\n &#39;sue帽a el que a medrar empieza,&#39;,\n &#39;sue帽a el que afana y pretende,&#39;,\n &#39;sue帽a el que agravia y ofende,&#39;,\n &#39;&#39;,\n &#39;y en el mundo, en conclusi贸n,&#39;,\n &#39;todos sue帽an lo que son,&#39;,\n &#39;aunque ninguno lo entiende.&#39;,\n &#39;&#39;]\n</code></pre>\n<p>如果以写入模式打开文件 <code>f=open(path, &#39;w&#39;)</code> ，一个新的文件会在对应的路径位置被创建，并覆盖路径下的同名文件。还有 <code>&#39;x&#39;</code> 文件模式，会创建可写文件，但在给定路径下存在同名文件就会写入失败。</p>\n<p>对于可读文件，最常用的方法是 <code>read</code>、<code>seek</code> 和 <code>tell</code>。<code>read</code> 返回文件中一定量字符，或在二进制模式打开的文件下读取简单的原生字节。</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">f &#x3D; open(path)\nf.read(10)</code></pre>\n\n\n\n\n<pre><code>&#39;Sue帽a el r&#39;\n</code></pre>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">f2 &#x3D; open(path, &#39;rb&#39;)  # Binary mode\nf2.read(10)</code></pre>\n\n\n\n\n<pre><code>b&#39;Sue\\xc3\\xb1a el &#39;\n</code></pre>\n<p><code>read</code> 通过读取字节数来推进文件句柄的位置，<code>tell</code> 方法可以给出句柄当前的位置。</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">f.tell()</code></pre>\n\n\n\n\n<pre><code>11\n</code></pre>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">f2.tell()</code></pre>\n\n\n\n\n<pre><code>10\n</code></pre>\n<p>查看文件的默认编码。</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">import sys\nsys.getdefaultencoding()</code></pre>\n\n\n\n\n<pre><code>&#39;utf-8&#39;\n</code></pre>\n<p><code>seek</code> 方法可以将句柄位置改变到文件中特定的字节。</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">f.seek(5)\nf.read(1)</code></pre>\n\n\n\n\n<pre><code>&#39;a&#39;\n</code></pre>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">f.close()\nf2.close()</code></pre>\n\n<p>使用文件对象的 <code>write</code> 方法或 <code>writelines</code> 方法。</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">with open(&#39;examples&#x2F;tmp.txt&#39;, &#39;w&#39;) as handle:\n    handle.writelines(x for x in open(path) if len(x) &gt; 1)\nwith open(&#39;examples&#x2F;tmp.txt&#39;) as f:\n    lines &#x3D; f.readlines()\nlines</code></pre>\n\n\n\n\n<pre><code>[&#39;Sue帽a el rico en su riqueza,\\n&#39;,\n &#39;que m谩s cuidados le ofrece;\\n&#39;,\n &#39;sue帽a el pobre que padece\\n&#39;,\n &#39;su miseria y su pobreza;\\n&#39;,\n &#39;sue帽a el que a medrar empieza,\\n&#39;,\n &#39;sue帽a el que afana y pretende,\\n&#39;,\n &#39;sue帽a el que agravia y ofende,\\n&#39;,\n &#39;y en el mundo, en conclusi贸n,\\n&#39;,\n &#39;todos sue帽an lo que son,\\n&#39;,\n &#39;aunque ninguno lo entiende.\\n&#39;]\n</code></pre>\n<p>删除文件。</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">import os\nos.remove(&#39;examples&#x2F;tmp.txt&#39;)</code></pre>\n\n<h3 id=\"Bytes-and-Unicode-with-Files（字节与-Unicode-文件）\"><a href=\"#Bytes-and-Unicode-with-Files（字节与-Unicode-文件）\" class=\"headerlink\" title=\"Bytes and Unicode with Files（字节与 Unicode 文件）\"></a>Bytes and Unicode with Files（字节与 Unicode 文件）</h3><pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">with open(path) as f:\n    chars &#x3D; f.read(10)\nchars</code></pre>\n\n\n\n\n<pre><code>&#39;Sue帽a el r&#39;\n</code></pre>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">with open(path, &#39;rb&#39;) as f:\n    data &#x3D; f.read(10)\ndata</code></pre>\n\n\n\n\n<pre><code>b&#39;Sue\\xc3\\xb1a el &#39;\n</code></pre>\n<p>只有每个已编码的 Unicode 字符完整的情况下，才能解码。</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">data.decode(&#39;utf8&#39;)</code></pre>\n\n\n\n\n<pre><code>&#39;Sueña el &#39;\n</code></pre>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">data[:4].decode(&#39;utf8&#39;)</code></pre>\n\n\n<pre><code>---------------------------------------------------------------------------\n\nUnicodeDecodeError                        Traceback (most recent call last)\n\n&lt;ipython-input-112-0ad9ad6a11bd&gt; in &lt;module&gt;\n----&gt; 1 data[:4].decode(&#39;utf8&#39;)\n\n\nUnicodeDecodeError: &#39;utf-8&#39; codec can&#39;t decode byte 0xc3 in position 3: unexpected end of data\n</code></pre>\n<p>用 <code>open</code> 方法的选项参数 <code>encoding</code> 对文件进行转码。</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">sink_path &#x3D; &#39;sink.txt&#39;\nwith open(path) as source:\n    with open(sink_path, &#39;xt&#39;, encoding&#x3D;&#39;utf-16&#39;) as sink:\n        sink.write(source.read())\nwith open(sink_path, encoding&#x3D;&#39;utf-16&#39;) as f:\n    print(f.read(10))</code></pre>\n\n<pre><code>Sue帽a el r\n</code></pre>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">os.remove(sink_path)</code></pre>\n\n<p>除二进制模式，在打开文件时使用 <code>seek</code> 要小心，当文件句柄位置恰好在一个 Unicode 符号的字节中间时，后续读取会导致错误。</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">f &#x3D; open(path)\nf.read(5)</code></pre>\n\n\n\n\n<pre><code>&#39;Sue帽a&#39;\n</code></pre>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">f.seek(4)\nf.read(1)</code></pre>\n\n\n\n\n<pre><code>&#39;盿&#39;\n</code></pre>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">f.close()</code></pre>\n\n\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">%popd</code></pre>\n\n<pre><code>UsageError: %popd on empty stack\n</code></pre>\n","text":"Python 内建数据结构，函数和文件系统学习笔记。 Data Structures and Sequences（数据结构和序列）Tuple（元组）用逗号分隔创建元组。 tup &#x3D; 4, 5, 6 tup (4, 5, 6) 创建嵌套元组。 nested_tup &#x...","link":"","photos":[],"count_time":{"symbolsCount":"26k","symbolsTime":"24 mins."},"categories":[{"name":"笔记","slug":"笔记","count":5,"path":"api/categories/笔记.json"},{"name":"Python","slug":"笔记/Python","count":2,"path":"api/categories/笔记/Python.json"}],"tags":[{"name":"python","slug":"python","count":4,"path":"api/tags/python.json"},{"name":"读书笔记","slug":"读书笔记","count":3,"path":"api/tags/读书笔记.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#Data-Structures-and-Sequences%EF%BC%88%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%92%8C%E5%BA%8F%E5%88%97%EF%BC%89\"><span class=\"toc-text\">Data Structures and Sequences（数据结构和序列）</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#Tuple%EF%BC%88%E5%85%83%E7%BB%84%EF%BC%89\"><span class=\"toc-text\">Tuple（元组）</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#Unpacking-tuples%EF%BC%88%E5%85%83%E7%BB%84%E6%8B%86%E5%8C%85%EF%BC%89\"><span class=\"toc-text\">Unpacking tuples（元组拆包）</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#Tuple-methods%EF%BC%88%E5%85%83%E7%BB%84%E6%96%B9%E6%B3%95%EF%BC%89\"><span class=\"toc-text\">Tuple methods（元组方法）</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#List%EF%BC%88%E5%88%97%E8%A1%A8%EF%BC%89\"><span class=\"toc-text\">List（列表）</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#Adding-and-removing-elements%EF%BC%88%E5%A2%9E%E5%8A%A0%E4%B8%8E%E7%A7%BB%E9%99%A4%E5%85%83%E7%B4%A0%EF%BC%89\"><span class=\"toc-text\">Adding and removing elements（增加与移除元素）</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#Concatenating-and-combining-lists%EF%BC%88%E8%BF%9E%E6%8E%A5%E5%92%8C%E8%81%94%E5%90%88%E5%88%97%E8%A1%A8%EF%BC%89\"><span class=\"toc-text\">Concatenating and combining lists（连接和联合列表）</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#Sorting%EF%BC%88%E6%8E%92%E5%BA%8F%EF%BC%89\"><span class=\"toc-text\">Sorting（排序）</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#Binary-search-and-maintaining-a-sorted-list%EF%BC%88%E4%BA%8C%E5%88%86%E6%90%9C%E7%B4%A2%E4%B8%8E%E5%B7%B2%E6%8E%92%E5%BA%8F%E5%88%97%E8%A1%A8%E7%9A%84%E7%BB%B4%E6%8A%A4%EF%BC%89\"><span class=\"toc-text\">Binary search and maintaining a sorted list（二分搜索与已排序列表的维护）</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#Slicing%EF%BC%88%E5%88%87%E7%89%87%EF%BC%89\"><span class=\"toc-text\">Slicing（切片）</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#Built-in-Sequence-Functions%EF%BC%88%E5%86%85%E5%BB%BA%E5%BA%8F%E5%88%97%E5%87%BD%E6%95%B0%EF%BC%89\"><span class=\"toc-text\">Built-in Sequence Functions（内建序列函数）</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#enumerate\"><span class=\"toc-text\">enumerate</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#sorted\"><span class=\"toc-text\">sorted</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#zip\"><span class=\"toc-text\">zip</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#reversed\"><span class=\"toc-text\">reversed</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#dict%EF%BC%88%E5%AD%97%E5%85%B8%EF%BC%89\"><span class=\"toc-text\">dict（字典）</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#Creating-dicts-from-sequences%EF%BC%88%E4%BB%8E%E5%BA%8F%E5%88%97%E7%94%9F%E6%88%90%E5%AD%97%E5%85%B8%EF%BC%89\"><span class=\"toc-text\">Creating dicts from sequences（从序列生成字典）</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#Default-values%EF%BC%88%E9%BB%98%E8%AE%A4%E5%80%BC%EF%BC%89\"><span class=\"toc-text\">Default values（默认值）</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#Valid-dict-key-types%EF%BC%88%E6%9C%89%E6%95%88%E5%AD%97%E5%85%B8%E9%94%AE%E7%B1%BB%E5%9E%8B%EF%BC%89\"><span class=\"toc-text\">Valid dict key types（有效字典键类型）</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#set%EF%BC%88%E9%9B%86%E5%90%88%EF%BC%89\"><span class=\"toc-text\">set（集合）</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#List-Set-and-Dict-Comprehensions%EF%BC%88%E5%88%97%E8%A1%A8%E3%80%81%E9%9B%86%E5%90%88%E5%92%8C%E5%AD%97%E5%85%B8%E7%9A%84%E6%8E%A8%E5%AF%BC%E5%BC%8F%EF%BC%89\"><span class=\"toc-text\">List, Set, and Dict Comprehensions（列表、集合和字典的推导式）</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#Nested-list-comprehensions%EF%BC%88%E5%B5%8C%E5%A5%97%E5%88%97%E8%A1%A8%E6%8E%A8%E5%AF%BC%E5%BC%8F%EF%BC%89\"><span class=\"toc-text\">Nested list comprehensions（嵌套列表推导式）</span></a></li></ol></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#Functions%EF%BC%88%E5%87%BD%E6%95%B0%EF%BC%89\"><span class=\"toc-text\">Functions（函数）</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#Namespaces-Scope-and-Local-Functions%EF%BC%88%E5%91%BD%E5%90%8D%E7%A9%BA%E9%97%B4%E3%80%81%E4%BD%9C%E7%94%A8%E5%9F%9F%E5%92%8C%E6%9C%AC%E5%9C%B0%E5%87%BD%E6%95%B0%EF%BC%89\"><span class=\"toc-text\">Namespaces, Scope, and Local Functions（命名空间、作用域和本地函数）</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#Returning-Multiple-Values%EF%BC%88%E8%BF%94%E5%9B%9E%E5%A4%9A%E4%B8%AA%E5%80%BC%EF%BC%89\"><span class=\"toc-text\">Returning Multiple Values（返回多个值）</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#Functions-Are-Objects%EF%BC%88%E5%87%BD%E6%95%B0%E6%98%AF%E5%AF%B9%E8%B1%A1%EF%BC%89\"><span class=\"toc-text\">Functions Are Objects（函数是对象）</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#Anonymous-Lambda-Functions%EF%BC%88%E5%8C%BF%E5%90%8D%E5%87%BD%E6%95%B0%EF%BC%89\"><span class=\"toc-text\">Anonymous (Lambda) Functions（匿名函数）</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#Currying-Partial-Argument-Application%EF%BC%88%E6%9F%AF%E9%87%8C%E5%8C%96%EF%BC%9A%E9%83%A8%E5%88%86%E5%8F%82%E6%95%B0%E5%BA%94%E7%94%A8%EF%BC%89\"><span class=\"toc-text\">Currying: Partial Argument Application（柯里化：部分参数应用）</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#Generators%EF%BC%88%E7%94%9F%E6%88%90%E5%99%A8%EF%BC%89\"><span class=\"toc-text\">Generators（生成器）</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#Generator-expresssions%EF%BC%88%E7%94%9F%E6%88%90%E5%99%A8%E8%A1%A8%E8%BE%BE%E5%BC%8F%EF%BC%89\"><span class=\"toc-text\">Generator expresssions（生成器表达式）</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#itertools-module%EF%BC%88itertools-%E6%A8%A1%E5%9D%97%EF%BC%89\"><span class=\"toc-text\">itertools module（itertools 模块）</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#Errors-and-Exception-Handling%EF%BC%88%E9%94%99%E8%AF%AF%E5%92%8C%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86%EF%BC%89\"><span class=\"toc-text\">Errors and Exception Handling（错误和异常处理）</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#Exceptions-in-IPython%EF%BC%88IPython-%E4%B8%AD%E7%9A%84%E5%BC%82%E5%B8%B8%EF%BC%89\"><span class=\"toc-text\">Exceptions in IPython（IPython 中的异常）</span></a></li></ol></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#Files-and-the-Operating-System%EF%BC%88%E6%96%87%E4%BB%B6%E5%92%8C%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%EF%BC%89\"><span class=\"toc-text\">Files and the Operating System（文件和操作系统）</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#Bytes-and-Unicode-with-Files%EF%BC%88%E5%AD%97%E8%8A%82%E4%B8%8E-Unicode-%E6%96%87%E4%BB%B6%EF%BC%89\"><span class=\"toc-text\">Bytes and Unicode with Files（字节与 Unicode 文件）</span></a></li></ol></li></ol>","author":{"name":"Ryanhui","slug":"blog-author","avatar":"https://avatars1.githubusercontent.com/u/43368274?s=460&u=50a78f666213a52518d0076c1ca1cd9862076167&v=4","link":"/","description":"写博客，不过是孤芳自赏","socials":{"github":"https://github.com/Ranhuiryan","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/wbgjh","zhihu":"","csdn":"","juejin":"","customs":{"bilibili":{"icon":"/svg/bilibili-fill.svg","link":"https://space.bilibili.com/5472735"},"researchgate":{"icon":"/svg/researchgate.svg","link":"https://www.researchgate.net/profile/Guo-Jihong"}}}},"mapped":true,"prev_post":{"title":"Anaconda 虚拟环境配置和使用","uid":"9cf1570f7db7f75fb8362c869acb770d","slug":"Anaconda-虚拟环境配置和使用","date":"2019-07-25T08:58:03.000Z","updated":"2021-08-23T02:01:49.365Z","comments":true,"path":"api/articles/Anaconda-虚拟环境配置和使用.json","keywords":null,"cover":"/svg/anaconda.svg","text":"转自：cnblog，CSDN Conda 环境管理创建环境使用 conda create 命令，后边跟上你希望用来称呼它的任何名字： conda create --name snowflakes biopython 这条命令将会在 Anaconda3/envs/snowflake...","link":"","photos":[],"count_time":{"symbolsCount":"1.9k","symbolsTime":"2 mins."},"categories":[{"name":"Python","slug":"Python","count":1,"path":"api/categories/Python.json"}],"tags":[{"name":"Anaconda","slug":"Anaconda","count":1,"path":"api/tags/Anaconda.json"},{"name":"Python","slug":"Python","count":1,"path":"api/tags/Python.json"}],"author":{"name":"Ryanhui","slug":"blog-author","avatar":"https://avatars1.githubusercontent.com/u/43368274?s=460&u=50a78f666213a52518d0076c1ca1cd9862076167&v=4","link":"/","description":"写博客，不过是孤芳自赏","socials":{"github":"https://github.com/Ranhuiryan","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/wbgjh","zhihu":"","csdn":"","juejin":"","customs":{"bilibili":{"icon":"/svg/bilibili-fill.svg","link":"https://space.bilibili.com/5472735"},"researchgate":{"icon":"/svg/researchgate.svg","link":"https://www.researchgate.net/profile/Guo-Jihong"}}}}},"next_post":{"title":"Python 语言基础，IPython 和 Jupyter Notebook","uid":"e9467e98877499c2145d4cfcc50df70b","slug":"Python-语言基础，IPython-和-Jupyter-Notebook","date":"2019-07-15T09:03:24.000Z","updated":"2021-08-19T08:50:37.176Z","comments":true,"path":"api/articles/Python-语言基础，IPython-和-Jupyter-Notebook.json","keywords":null,"cover":"https://files.realpython.com/media/Python-Metaclasses_Watermarked.67e351592b05.jpg","text":"Python 语言基础，IPython 和 Jupyter Notebook 学习笔记。 The Python Interpreter$ python Python 3.6.0 | packaged by conda-forge | (default, Jan 13 2017, ...","link":"","photos":[],"count_time":{"symbolsCount":"17k","symbolsTime":"16 mins."},"categories":[{"name":"笔记","slug":"笔记","count":5,"path":"api/categories/笔记.json"},{"name":"Python","slug":"笔记/Python","count":2,"path":"api/categories/笔记/Python.json"}],"tags":[{"name":"python","slug":"python","count":4,"path":"api/tags/python.json"},{"name":"读书笔记","slug":"读书笔记","count":3,"path":"api/tags/读书笔记.json"}],"author":{"name":"Ryanhui","slug":"blog-author","avatar":"https://avatars1.githubusercontent.com/u/43368274?s=460&u=50a78f666213a52518d0076c1ca1cd9862076167&v=4","link":"/","description":"写博客，不过是孤芳自赏","socials":{"github":"https://github.com/Ranhuiryan","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/wbgjh","zhihu":"","csdn":"","juejin":"","customs":{"bilibili":{"icon":"/svg/bilibili-fill.svg","link":"https://space.bilibili.com/5472735"},"researchgate":{"icon":"/svg/researchgate.svg","link":"https://www.researchgate.net/profile/Guo-Jihong"}}}}}}